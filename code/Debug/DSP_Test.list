
DSP_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c9c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003e24  08003e24  00013e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e3c  08003e3c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003e3c  08003e3c  00013e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e44  08003e44  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e44  08003e44  00013e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e48  08003e48  00013e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003e4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  2000000c  08003e58  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  08003e58  00020254  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000746f  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a1f  00000000  00000000  000274ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006b0  00000000  00000000  00028f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004f6  00000000  00000000  000295c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f497  00000000  00000000  00029ab6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008e4f  00000000  00000000  00048f4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bceec  00000000  00000000  00051d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001990  00000000  00000000  0010ec88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00110618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003e0c 	.word	0x08003e0c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003e0c 	.word	0x08003e0c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004c8:	4b0e      	ldr	r3, [pc, #56]	; (8000504 <HAL_Init+0x40>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a0d      	ldr	r2, [pc, #52]	; (8000504 <HAL_Init+0x40>)
 80004ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004d4:	4b0b      	ldr	r3, [pc, #44]	; (8000504 <HAL_Init+0x40>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a0a      	ldr	r2, [pc, #40]	; (8000504 <HAL_Init+0x40>)
 80004da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e0:	4b08      	ldr	r3, [pc, #32]	; (8000504 <HAL_Init+0x40>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a07      	ldr	r2, [pc, #28]	; (8000504 <HAL_Init+0x40>)
 80004e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004ec:	2003      	movs	r0, #3
 80004ee:	f000 f92b 	bl	8000748 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004f2:	2000      	movs	r0, #0
 80004f4:	f000 f808 	bl	8000508 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004f8:	f003 faae 	bl	8003a58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004fc:	2300      	movs	r3, #0
}
 80004fe:	4618      	mov	r0, r3
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40023c00 	.word	0x40023c00

08000508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000510:	4b12      	ldr	r3, [pc, #72]	; (800055c <HAL_InitTick+0x54>)
 8000512:	681a      	ldr	r2, [r3, #0]
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <HAL_InitTick+0x58>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	4619      	mov	r1, r3
 800051a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800051e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000522:	fbb2 f3f3 	udiv	r3, r2, r3
 8000526:	4618      	mov	r0, r3
 8000528:	f000 f943 	bl	80007b2 <HAL_SYSTICK_Config>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000532:	2301      	movs	r3, #1
 8000534:	e00e      	b.n	8000554 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2b0f      	cmp	r3, #15
 800053a:	d80a      	bhi.n	8000552 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800053c:	2200      	movs	r2, #0
 800053e:	6879      	ldr	r1, [r7, #4]
 8000540:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000544:	f000 f90b 	bl	800075e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000548:	4a06      	ldr	r2, [pc, #24]	; (8000564 <HAL_InitTick+0x5c>)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800054e:	2300      	movs	r3, #0
 8000550:	e000      	b.n	8000554 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000552:	2301      	movs	r3, #1
}
 8000554:	4618      	mov	r0, r3
 8000556:	3708      	adds	r7, #8
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	20000008 	.word	0x20000008
 8000560:	20000004 	.word	0x20000004
 8000564:	20000000 	.word	0x20000000

08000568 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800056c:	4b06      	ldr	r3, [pc, #24]	; (8000588 <HAL_IncTick+0x20>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	461a      	mov	r2, r3
 8000572:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_IncTick+0x24>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4413      	add	r3, r2
 8000578:	4a04      	ldr	r2, [pc, #16]	; (800058c <HAL_IncTick+0x24>)
 800057a:	6013      	str	r3, [r2, #0]
}
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	20000004 	.word	0x20000004
 800058c:	20000028 	.word	0x20000028

08000590 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  return uwTick;
 8000594:	4b03      	ldr	r3, [pc, #12]	; (80005a4 <HAL_GetTick+0x14>)
 8000596:	681b      	ldr	r3, [r3, #0]
}
 8000598:	4618      	mov	r0, r3
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	20000028 	.word	0x20000028

080005a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	f003 0307 	and.w	r3, r3, #7
 80005b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005b8:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <__NVIC_SetPriorityGrouping+0x44>)
 80005ba:	68db      	ldr	r3, [r3, #12]
 80005bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005be:	68ba      	ldr	r2, [r7, #8]
 80005c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005c4:	4013      	ands	r3, r2
 80005c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005da:	4a04      	ldr	r2, [pc, #16]	; (80005ec <__NVIC_SetPriorityGrouping+0x44>)
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	60d3      	str	r3, [r2, #12]
}
 80005e0:	bf00      	nop
 80005e2:	3714      	adds	r7, #20
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	e000ed00 	.word	0xe000ed00

080005f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005f4:	4b04      	ldr	r3, [pc, #16]	; (8000608 <__NVIC_GetPriorityGrouping+0x18>)
 80005f6:	68db      	ldr	r3, [r3, #12]
 80005f8:	0a1b      	lsrs	r3, r3, #8
 80005fa:	f003 0307 	and.w	r3, r3, #7
}
 80005fe:	4618      	mov	r0, r3
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	e000ed00 	.word	0xe000ed00

0800060c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061a:	2b00      	cmp	r3, #0
 800061c:	db0b      	blt.n	8000636 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	f003 021f 	and.w	r2, r3, #31
 8000624:	4907      	ldr	r1, [pc, #28]	; (8000644 <__NVIC_EnableIRQ+0x38>)
 8000626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062a:	095b      	lsrs	r3, r3, #5
 800062c:	2001      	movs	r0, #1
 800062e:	fa00 f202 	lsl.w	r2, r0, r2
 8000632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000636:	bf00      	nop
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	e000e100 	.word	0xe000e100

08000648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	6039      	str	r1, [r7, #0]
 8000652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000658:	2b00      	cmp	r3, #0
 800065a:	db0a      	blt.n	8000672 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	b2da      	uxtb	r2, r3
 8000660:	490c      	ldr	r1, [pc, #48]	; (8000694 <__NVIC_SetPriority+0x4c>)
 8000662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000666:	0112      	lsls	r2, r2, #4
 8000668:	b2d2      	uxtb	r2, r2
 800066a:	440b      	add	r3, r1
 800066c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000670:	e00a      	b.n	8000688 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	b2da      	uxtb	r2, r3
 8000676:	4908      	ldr	r1, [pc, #32]	; (8000698 <__NVIC_SetPriority+0x50>)
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	f003 030f 	and.w	r3, r3, #15
 800067e:	3b04      	subs	r3, #4
 8000680:	0112      	lsls	r2, r2, #4
 8000682:	b2d2      	uxtb	r2, r2
 8000684:	440b      	add	r3, r1
 8000686:	761a      	strb	r2, [r3, #24]
}
 8000688:	bf00      	nop
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr
 8000694:	e000e100 	.word	0xe000e100
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800069c:	b480      	push	{r7}
 800069e:	b089      	sub	sp, #36	; 0x24
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	60b9      	str	r1, [r7, #8]
 80006a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	f003 0307 	and.w	r3, r3, #7
 80006ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006b0:	69fb      	ldr	r3, [r7, #28]
 80006b2:	f1c3 0307 	rsb	r3, r3, #7
 80006b6:	2b04      	cmp	r3, #4
 80006b8:	bf28      	it	cs
 80006ba:	2304      	movcs	r3, #4
 80006bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006be:	69fb      	ldr	r3, [r7, #28]
 80006c0:	3304      	adds	r3, #4
 80006c2:	2b06      	cmp	r3, #6
 80006c4:	d902      	bls.n	80006cc <NVIC_EncodePriority+0x30>
 80006c6:	69fb      	ldr	r3, [r7, #28]
 80006c8:	3b03      	subs	r3, #3
 80006ca:	e000      	b.n	80006ce <NVIC_EncodePriority+0x32>
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006d4:	69bb      	ldr	r3, [r7, #24]
 80006d6:	fa02 f303 	lsl.w	r3, r2, r3
 80006da:	43da      	mvns	r2, r3
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	401a      	ands	r2, r3
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	fa01 f303 	lsl.w	r3, r1, r3
 80006ee:	43d9      	mvns	r1, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f4:	4313      	orrs	r3, r2
         );
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3724      	adds	r7, #36	; 0x24
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
	...

08000704 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	3b01      	subs	r3, #1
 8000710:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000714:	d301      	bcc.n	800071a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000716:	2301      	movs	r3, #1
 8000718:	e00f      	b.n	800073a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800071a:	4a0a      	ldr	r2, [pc, #40]	; (8000744 <SysTick_Config+0x40>)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	3b01      	subs	r3, #1
 8000720:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000722:	210f      	movs	r1, #15
 8000724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000728:	f7ff ff8e 	bl	8000648 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800072c:	4b05      	ldr	r3, [pc, #20]	; (8000744 <SysTick_Config+0x40>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000732:	4b04      	ldr	r3, [pc, #16]	; (8000744 <SysTick_Config+0x40>)
 8000734:	2207      	movs	r2, #7
 8000736:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000738:	2300      	movs	r3, #0
}
 800073a:	4618      	mov	r0, r3
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	e000e010 	.word	0xe000e010

08000748 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f7ff ff29 	bl	80005a8 <__NVIC_SetPriorityGrouping>
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}

0800075e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800075e:	b580      	push	{r7, lr}
 8000760:	b086      	sub	sp, #24
 8000762:	af00      	add	r7, sp, #0
 8000764:	4603      	mov	r3, r0
 8000766:	60b9      	str	r1, [r7, #8]
 8000768:	607a      	str	r2, [r7, #4]
 800076a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000770:	f7ff ff3e 	bl	80005f0 <__NVIC_GetPriorityGrouping>
 8000774:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	68b9      	ldr	r1, [r7, #8]
 800077a:	6978      	ldr	r0, [r7, #20]
 800077c:	f7ff ff8e 	bl	800069c <NVIC_EncodePriority>
 8000780:	4602      	mov	r2, r0
 8000782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000786:	4611      	mov	r1, r2
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff ff5d 	bl	8000648 <__NVIC_SetPriority>
}
 800078e:	bf00      	nop
 8000790:	3718      	adds	r7, #24
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	b082      	sub	sp, #8
 800079a:	af00      	add	r7, sp, #0
 800079c:	4603      	mov	r3, r0
 800079e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff ff31 	bl	800060c <__NVIC_EnableIRQ>
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	f7ff ffa2 	bl	8000704 <SysTick_Config>
 80007c0:	4603      	mov	r3, r0
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
	...

080007cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80007d8:	f7ff feda 	bl	8000590 <HAL_GetTick>
 80007dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d101      	bne.n	80007e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80007e4:	2301      	movs	r3, #1
 80007e6:	e099      	b.n	800091c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2200      	movs	r2, #0
 80007ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2202      	movs	r2, #2
 80007f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	681a      	ldr	r2, [r3, #0]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f022 0201 	bic.w	r2, r2, #1
 8000806:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000808:	e00f      	b.n	800082a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800080a:	f7ff fec1 	bl	8000590 <HAL_GetTick>
 800080e:	4602      	mov	r2, r0
 8000810:	693b      	ldr	r3, [r7, #16]
 8000812:	1ad3      	subs	r3, r2, r3
 8000814:	2b05      	cmp	r3, #5
 8000816:	d908      	bls.n	800082a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2220      	movs	r2, #32
 800081c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2203      	movs	r2, #3
 8000822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000826:	2303      	movs	r3, #3
 8000828:	e078      	b.n	800091c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f003 0301 	and.w	r3, r3, #1
 8000834:	2b00      	cmp	r3, #0
 8000836:	d1e8      	bne.n	800080a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000840:	697a      	ldr	r2, [r7, #20]
 8000842:	4b38      	ldr	r3, [pc, #224]	; (8000924 <HAL_DMA_Init+0x158>)
 8000844:	4013      	ands	r3, r2
 8000846:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	685a      	ldr	r2, [r3, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	689b      	ldr	r3, [r3, #8]
 8000850:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000856:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	691b      	ldr	r3, [r3, #16]
 800085c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000862:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800086e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	6a1b      	ldr	r3, [r3, #32]
 8000874:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000876:	697a      	ldr	r2, [r7, #20]
 8000878:	4313      	orrs	r3, r2
 800087a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000880:	2b04      	cmp	r3, #4
 8000882:	d107      	bne.n	8000894 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088c:	4313      	orrs	r3, r2
 800088e:	697a      	ldr	r2, [r7, #20]
 8000890:	4313      	orrs	r3, r2
 8000892:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	697a      	ldr	r2, [r7, #20]
 800089a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	695b      	ldr	r3, [r3, #20]
 80008a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	f023 0307 	bic.w	r3, r3, #7
 80008aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008b0:	697a      	ldr	r2, [r7, #20]
 80008b2:	4313      	orrs	r3, r2
 80008b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ba:	2b04      	cmp	r3, #4
 80008bc:	d117      	bne.n	80008ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008c2:	697a      	ldr	r2, [r7, #20]
 80008c4:	4313      	orrs	r3, r2
 80008c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d00e      	beq.n	80008ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80008d0:	6878      	ldr	r0, [r7, #4]
 80008d2:	f000 fa77 	bl	8000dc4 <DMA_CheckFifoParam>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d008      	beq.n	80008ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2240      	movs	r2, #64	; 0x40
 80008e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2201      	movs	r2, #1
 80008e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80008ea:	2301      	movs	r3, #1
 80008ec:	e016      	b.n	800091c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	697a      	ldr	r2, [r7, #20]
 80008f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f000 fa2e 	bl	8000d58 <DMA_CalcBaseAndBitshift>
 80008fc:	4603      	mov	r3, r0
 80008fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000904:	223f      	movs	r2, #63	; 0x3f
 8000906:	409a      	lsls	r2, r3
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2200      	movs	r2, #0
 8000910:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2201      	movs	r2, #1
 8000916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800091a:	2300      	movs	r3, #0
}
 800091c:	4618      	mov	r0, r3
 800091e:	3718      	adds	r7, #24
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	f010803f 	.word	0xf010803f

08000928 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	607a      	str	r2, [r7, #4]
 8000934:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000936:	2300      	movs	r3, #0
 8000938:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800093e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000946:	2b01      	cmp	r3, #1
 8000948:	d101      	bne.n	800094e <HAL_DMA_Start_IT+0x26>
 800094a:	2302      	movs	r3, #2
 800094c:	e048      	b.n	80009e0 <HAL_DMA_Start_IT+0xb8>
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	2201      	movs	r2, #1
 8000952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800095c:	b2db      	uxtb	r3, r3
 800095e:	2b01      	cmp	r3, #1
 8000960:	d137      	bne.n	80009d2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	2202      	movs	r2, #2
 8000966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	2200      	movs	r2, #0
 800096e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	68b9      	ldr	r1, [r7, #8]
 8000976:	68f8      	ldr	r0, [r7, #12]
 8000978:	f000 f9c0 	bl	8000cfc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000980:	223f      	movs	r2, #63	; 0x3f
 8000982:	409a      	lsls	r2, r3
 8000984:	693b      	ldr	r3, [r7, #16]
 8000986:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f042 0216 	orr.w	r2, r2, #22
 8000996:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	695a      	ldr	r2, [r3, #20]
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80009a6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d007      	beq.n	80009c0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f042 0208 	orr.w	r2, r2, #8
 80009be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f042 0201 	orr.w	r2, r2, #1
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	e005      	b.n	80009de <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	2200      	movs	r2, #0
 80009d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80009da:	2302      	movs	r3, #2
 80009dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80009de:	7dfb      	ldrb	r3, [r7, #23]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3718      	adds	r7, #24
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80009f4:	4b8e      	ldr	r3, [pc, #568]	; (8000c30 <HAL_DMA_IRQHandler+0x248>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a8e      	ldr	r2, [pc, #568]	; (8000c34 <HAL_DMA_IRQHandler+0x24c>)
 80009fa:	fba2 2303 	umull	r2, r3, r2, r3
 80009fe:	0a9b      	lsrs	r3, r3, #10
 8000a00:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a06:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a12:	2208      	movs	r2, #8
 8000a14:	409a      	lsls	r2, r3
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	4013      	ands	r3, r2
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d01a      	beq.n	8000a54 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f003 0304 	and.w	r3, r3, #4
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d013      	beq.n	8000a54 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f022 0204 	bic.w	r2, r2, #4
 8000a3a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a40:	2208      	movs	r2, #8
 8000a42:	409a      	lsls	r2, r3
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a4c:	f043 0201 	orr.w	r2, r3, #1
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a58:	2201      	movs	r2, #1
 8000a5a:	409a      	lsls	r2, r3
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d012      	beq.n	8000a8a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	695b      	ldr	r3, [r3, #20]
 8000a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d00b      	beq.n	8000a8a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a76:	2201      	movs	r2, #1
 8000a78:	409a      	lsls	r2, r3
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a82:	f043 0202 	orr.w	r2, r3, #2
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a8e:	2204      	movs	r2, #4
 8000a90:	409a      	lsls	r2, r3
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	4013      	ands	r3, r2
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d012      	beq.n	8000ac0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f003 0302 	and.w	r3, r3, #2
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d00b      	beq.n	8000ac0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000aac:	2204      	movs	r2, #4
 8000aae:	409a      	lsls	r2, r3
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ab8:	f043 0204 	orr.w	r2, r3, #4
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ac4:	2210      	movs	r2, #16
 8000ac6:	409a      	lsls	r2, r3
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	4013      	ands	r3, r2
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d043      	beq.n	8000b58 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f003 0308 	and.w	r3, r3, #8
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d03c      	beq.n	8000b58 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ae2:	2210      	movs	r2, #16
 8000ae4:	409a      	lsls	r2, r3
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d018      	beq.n	8000b2a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d108      	bne.n	8000b18 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d024      	beq.n	8000b58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	4798      	blx	r3
 8000b16:	e01f      	b.n	8000b58 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d01b      	beq.n	8000b58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	4798      	blx	r3
 8000b28:	e016      	b.n	8000b58 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d107      	bne.n	8000b48 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f022 0208 	bic.w	r2, r2, #8
 8000b46:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d003      	beq.n	8000b58 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b5c:	2220      	movs	r2, #32
 8000b5e:	409a      	lsls	r2, r3
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	4013      	ands	r3, r2
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	f000 808f 	beq.w	8000c88 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f003 0310 	and.w	r3, r3, #16
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	f000 8087 	beq.w	8000c88 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b7e:	2220      	movs	r2, #32
 8000b80:	409a      	lsls	r2, r3
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	2b05      	cmp	r3, #5
 8000b90:	d136      	bne.n	8000c00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f022 0216 	bic.w	r2, r2, #22
 8000ba0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	695a      	ldr	r2, [r3, #20]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000bb0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d103      	bne.n	8000bc2 <HAL_DMA_IRQHandler+0x1da>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d007      	beq.n	8000bd2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f022 0208 	bic.w	r2, r2, #8
 8000bd0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bd6:	223f      	movs	r2, #63	; 0x3f
 8000bd8:	409a      	lsls	r2, r3
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2200      	movs	r2, #0
 8000be2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2201      	movs	r2, #1
 8000bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d07e      	beq.n	8000cf4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	4798      	blx	r3
        }
        return;
 8000bfe:	e079      	b.n	8000cf4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d01d      	beq.n	8000c4a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d10d      	bne.n	8000c38 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d031      	beq.n	8000c88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	4798      	blx	r3
 8000c2c:	e02c      	b.n	8000c88 <HAL_DMA_IRQHandler+0x2a0>
 8000c2e:	bf00      	nop
 8000c30:	20000008 	.word	0x20000008
 8000c34:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d023      	beq.n	8000c88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	4798      	blx	r3
 8000c48:	e01e      	b.n	8000c88 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d10f      	bne.n	8000c78 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f022 0210 	bic.w	r2, r2, #16
 8000c66:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2201      	movs	r2, #1
 8000c74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d003      	beq.n	8000c88 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d032      	beq.n	8000cf6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c94:	f003 0301 	and.w	r3, r3, #1
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d022      	beq.n	8000ce2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2205      	movs	r2, #5
 8000ca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f022 0201 	bic.w	r2, r2, #1
 8000cb2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	697a      	ldr	r2, [r7, #20]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d307      	bcc.n	8000cd0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d1f2      	bne.n	8000cb4 <HAL_DMA_IRQHandler+0x2cc>
 8000cce:	e000      	b.n	8000cd2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8000cd0:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2201      	movs	r2, #1
 8000cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d005      	beq.n	8000cf6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	4798      	blx	r3
 8000cf2:	e000      	b.n	8000cf6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8000cf4:	bf00      	nop
    }
  }
}
 8000cf6:	3718      	adds	r7, #24
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
 8000d08:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d18:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	683a      	ldr	r2, [r7, #0]
 8000d20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	2b40      	cmp	r3, #64	; 0x40
 8000d28:	d108      	bne.n	8000d3c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	68ba      	ldr	r2, [r7, #8]
 8000d38:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8000d3a:	e007      	b.n	8000d4c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	68ba      	ldr	r2, [r7, #8]
 8000d42:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	60da      	str	r2, [r3, #12]
}
 8000d4c:	bf00      	nop
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	3b10      	subs	r3, #16
 8000d68:	4a14      	ldr	r2, [pc, #80]	; (8000dbc <DMA_CalcBaseAndBitshift+0x64>)
 8000d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d6e:	091b      	lsrs	r3, r3, #4
 8000d70:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000d72:	4a13      	ldr	r2, [pc, #76]	; (8000dc0 <DMA_CalcBaseAndBitshift+0x68>)
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	4413      	add	r3, r2
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	2b03      	cmp	r3, #3
 8000d84:	d909      	bls.n	8000d9a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000d8e:	f023 0303 	bic.w	r3, r3, #3
 8000d92:	1d1a      	adds	r2, r3, #4
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	659a      	str	r2, [r3, #88]	; 0x58
 8000d98:	e007      	b.n	8000daa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000da2:	f023 0303 	bic.w	r3, r3, #3
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3714      	adds	r7, #20
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	aaaaaaab 	.word	0xaaaaaaab
 8000dc0:	08003e24 	.word	0x08003e24

08000dc4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	699b      	ldr	r3, [r3, #24]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d11f      	bne.n	8000e1e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	2b03      	cmp	r3, #3
 8000de2:	d856      	bhi.n	8000e92 <DMA_CheckFifoParam+0xce>
 8000de4:	a201      	add	r2, pc, #4	; (adr r2, 8000dec <DMA_CheckFifoParam+0x28>)
 8000de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dea:	bf00      	nop
 8000dec:	08000dfd 	.word	0x08000dfd
 8000df0:	08000e0f 	.word	0x08000e0f
 8000df4:	08000dfd 	.word	0x08000dfd
 8000df8:	08000e93 	.word	0x08000e93
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d046      	beq.n	8000e96 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e0c:	e043      	b.n	8000e96 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e12:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000e16:	d140      	bne.n	8000e9a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e1c:	e03d      	b.n	8000e9a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	699b      	ldr	r3, [r3, #24]
 8000e22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e26:	d121      	bne.n	8000e6c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	2b03      	cmp	r3, #3
 8000e2c:	d837      	bhi.n	8000e9e <DMA_CheckFifoParam+0xda>
 8000e2e:	a201      	add	r2, pc, #4	; (adr r2, 8000e34 <DMA_CheckFifoParam+0x70>)
 8000e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e34:	08000e45 	.word	0x08000e45
 8000e38:	08000e4b 	.word	0x08000e4b
 8000e3c:	08000e45 	.word	0x08000e45
 8000e40:	08000e5d 	.word	0x08000e5d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000e44:	2301      	movs	r3, #1
 8000e46:	73fb      	strb	r3, [r7, #15]
      break;
 8000e48:	e030      	b.n	8000eac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d025      	beq.n	8000ea2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e5a:	e022      	b.n	8000ea2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e60:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000e64:	d11f      	bne.n	8000ea6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000e6a:	e01c      	b.n	8000ea6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d903      	bls.n	8000e7a <DMA_CheckFifoParam+0xb6>
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	2b03      	cmp	r3, #3
 8000e76:	d003      	beq.n	8000e80 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000e78:	e018      	b.n	8000eac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	73fb      	strb	r3, [r7, #15]
      break;
 8000e7e:	e015      	b.n	8000eac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d00e      	beq.n	8000eaa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	73fb      	strb	r3, [r7, #15]
      break;
 8000e90:	e00b      	b.n	8000eaa <DMA_CheckFifoParam+0xe6>
      break;
 8000e92:	bf00      	nop
 8000e94:	e00a      	b.n	8000eac <DMA_CheckFifoParam+0xe8>
      break;
 8000e96:	bf00      	nop
 8000e98:	e008      	b.n	8000eac <DMA_CheckFifoParam+0xe8>
      break;
 8000e9a:	bf00      	nop
 8000e9c:	e006      	b.n	8000eac <DMA_CheckFifoParam+0xe8>
      break;
 8000e9e:	bf00      	nop
 8000ea0:	e004      	b.n	8000eac <DMA_CheckFifoParam+0xe8>
      break;
 8000ea2:	bf00      	nop
 8000ea4:	e002      	b.n	8000eac <DMA_CheckFifoParam+0xe8>
      break;   
 8000ea6:	bf00      	nop
 8000ea8:	e000      	b.n	8000eac <DMA_CheckFifoParam+0xe8>
      break;
 8000eaa:	bf00      	nop
    }
  } 
  
  return status; 
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3714      	adds	r7, #20
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b089      	sub	sp, #36	; 0x24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
 8000ed6:	e16b      	b.n	80011b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ed8:	2201      	movs	r2, #1
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	697a      	ldr	r2, [r7, #20]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	f040 815a 	bne.w	80011aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d003      	beq.n	8000f06 <HAL_GPIO_Init+0x4a>
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	2b12      	cmp	r3, #18
 8000f04:	d123      	bne.n	8000f4e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	08da      	lsrs	r2, r3, #3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	3208      	adds	r2, #8
 8000f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	220f      	movs	r2, #15
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43db      	mvns	r3, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4013      	ands	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	691a      	ldr	r2, [r3, #16]
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	f003 0307 	and.w	r3, r3, #7
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	08da      	lsrs	r2, r3, #3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3208      	adds	r2, #8
 8000f48:	69b9      	ldr	r1, [r7, #24]
 8000f4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	2203      	movs	r2, #3
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4013      	ands	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f003 0203 	and.w	r2, r3, #3
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d00b      	beq.n	8000fa2 <HAL_GPIO_Init+0xe6>
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d007      	beq.n	8000fa2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f96:	2b11      	cmp	r3, #17
 8000f98:	d003      	beq.n	8000fa2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	2b12      	cmp	r3, #18
 8000fa0:	d130      	bne.n	8001004 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	2203      	movs	r2, #3
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	68da      	ldr	r2, [r3, #12]
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fd8:	2201      	movs	r2, #1
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	091b      	lsrs	r3, r3, #4
 8000fee:	f003 0201 	and.w	r2, r3, #1
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	2203      	movs	r2, #3
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4013      	ands	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	689a      	ldr	r2, [r3, #8]
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103c:	2b00      	cmp	r3, #0
 800103e:	f000 80b4 	beq.w	80011aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	4b60      	ldr	r3, [pc, #384]	; (80011c8 <HAL_GPIO_Init+0x30c>)
 8001048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104a:	4a5f      	ldr	r2, [pc, #380]	; (80011c8 <HAL_GPIO_Init+0x30c>)
 800104c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001050:	6453      	str	r3, [r2, #68]	; 0x44
 8001052:	4b5d      	ldr	r3, [pc, #372]	; (80011c8 <HAL_GPIO_Init+0x30c>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800105e:	4a5b      	ldr	r2, [pc, #364]	; (80011cc <HAL_GPIO_Init+0x310>)
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	089b      	lsrs	r3, r3, #2
 8001064:	3302      	adds	r3, #2
 8001066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800106a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	f003 0303 	and.w	r3, r3, #3
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	220f      	movs	r2, #15
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43db      	mvns	r3, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4013      	ands	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a52      	ldr	r2, [pc, #328]	; (80011d0 <HAL_GPIO_Init+0x314>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d02b      	beq.n	80010e2 <HAL_GPIO_Init+0x226>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a51      	ldr	r2, [pc, #324]	; (80011d4 <HAL_GPIO_Init+0x318>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d025      	beq.n	80010de <HAL_GPIO_Init+0x222>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a50      	ldr	r2, [pc, #320]	; (80011d8 <HAL_GPIO_Init+0x31c>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d01f      	beq.n	80010da <HAL_GPIO_Init+0x21e>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a4f      	ldr	r2, [pc, #316]	; (80011dc <HAL_GPIO_Init+0x320>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d019      	beq.n	80010d6 <HAL_GPIO_Init+0x21a>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a4e      	ldr	r2, [pc, #312]	; (80011e0 <HAL_GPIO_Init+0x324>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d013      	beq.n	80010d2 <HAL_GPIO_Init+0x216>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a4d      	ldr	r2, [pc, #308]	; (80011e4 <HAL_GPIO_Init+0x328>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d00d      	beq.n	80010ce <HAL_GPIO_Init+0x212>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a4c      	ldr	r2, [pc, #304]	; (80011e8 <HAL_GPIO_Init+0x32c>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d007      	beq.n	80010ca <HAL_GPIO_Init+0x20e>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a4b      	ldr	r2, [pc, #300]	; (80011ec <HAL_GPIO_Init+0x330>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d101      	bne.n	80010c6 <HAL_GPIO_Init+0x20a>
 80010c2:	2307      	movs	r3, #7
 80010c4:	e00e      	b.n	80010e4 <HAL_GPIO_Init+0x228>
 80010c6:	2308      	movs	r3, #8
 80010c8:	e00c      	b.n	80010e4 <HAL_GPIO_Init+0x228>
 80010ca:	2306      	movs	r3, #6
 80010cc:	e00a      	b.n	80010e4 <HAL_GPIO_Init+0x228>
 80010ce:	2305      	movs	r3, #5
 80010d0:	e008      	b.n	80010e4 <HAL_GPIO_Init+0x228>
 80010d2:	2304      	movs	r3, #4
 80010d4:	e006      	b.n	80010e4 <HAL_GPIO_Init+0x228>
 80010d6:	2303      	movs	r3, #3
 80010d8:	e004      	b.n	80010e4 <HAL_GPIO_Init+0x228>
 80010da:	2302      	movs	r3, #2
 80010dc:	e002      	b.n	80010e4 <HAL_GPIO_Init+0x228>
 80010de:	2301      	movs	r3, #1
 80010e0:	e000      	b.n	80010e4 <HAL_GPIO_Init+0x228>
 80010e2:	2300      	movs	r3, #0
 80010e4:	69fa      	ldr	r2, [r7, #28]
 80010e6:	f002 0203 	and.w	r2, r2, #3
 80010ea:	0092      	lsls	r2, r2, #2
 80010ec:	4093      	lsls	r3, r2
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010f4:	4935      	ldr	r1, [pc, #212]	; (80011cc <HAL_GPIO_Init+0x310>)
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	089b      	lsrs	r3, r3, #2
 80010fa:	3302      	adds	r3, #2
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001102:	4b3b      	ldr	r3, [pc, #236]	; (80011f0 <HAL_GPIO_Init+0x334>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	43db      	mvns	r3, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4013      	ands	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001126:	4a32      	ldr	r2, [pc, #200]	; (80011f0 <HAL_GPIO_Init+0x334>)
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800112c:	4b30      	ldr	r3, [pc, #192]	; (80011f0 <HAL_GPIO_Init+0x334>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	43db      	mvns	r3, r3
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4013      	ands	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d003      	beq.n	8001150 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	4313      	orrs	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001150:	4a27      	ldr	r2, [pc, #156]	; (80011f0 <HAL_GPIO_Init+0x334>)
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001156:	4b26      	ldr	r3, [pc, #152]	; (80011f0 <HAL_GPIO_Init+0x334>)
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	43db      	mvns	r3, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4013      	ands	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800117a:	4a1d      	ldr	r2, [pc, #116]	; (80011f0 <HAL_GPIO_Init+0x334>)
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001180:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <HAL_GPIO_Init+0x334>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d003      	beq.n	80011a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011a4:	4a12      	ldr	r2, [pc, #72]	; (80011f0 <HAL_GPIO_Init+0x334>)
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3301      	adds	r3, #1
 80011ae:	61fb      	str	r3, [r7, #28]
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	2b0f      	cmp	r3, #15
 80011b4:	f67f ae90 	bls.w	8000ed8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011b8:	bf00      	nop
 80011ba:	bf00      	nop
 80011bc:	3724      	adds	r7, #36	; 0x24
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40013800 	.word	0x40013800
 80011d0:	40020000 	.word	0x40020000
 80011d4:	40020400 	.word	0x40020400
 80011d8:	40020800 	.word	0x40020800
 80011dc:	40020c00 	.word	0x40020c00
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40021400 	.word	0x40021400
 80011e8:	40021800 	.word	0x40021800
 80011ec:	40021c00 	.word	0x40021c00
 80011f0:	40013c00 	.word	0x40013c00

080011f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	460b      	mov	r3, r1
 80011fe:	807b      	strh	r3, [r7, #2]
 8001200:	4613      	mov	r3, r2
 8001202:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001204:	787b      	ldrb	r3, [r7, #1]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800120a:	887a      	ldrh	r2, [r7, #2]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001210:	e003      	b.n	800121a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001212:	887b      	ldrh	r3, [r7, #2]
 8001214:	041a      	lsls	r2, r3, #16
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	619a      	str	r2, [r3, #24]
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
	...

08001228 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d101      	bne.n	800123a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e128      	b.n	800148c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2b00      	cmp	r3, #0
 8001244:	d109      	bne.n	800125a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a90      	ldr	r2, [pc, #576]	; (8001494 <HAL_I2S_Init+0x26c>)
 8001252:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f002 fc27 	bl	8003aa8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2202      	movs	r2, #2
 800125e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	69db      	ldr	r3, [r3, #28]
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	6812      	ldr	r2, [r2, #0]
 800126c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001270:	f023 030f 	bic.w	r3, r3, #15
 8001274:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2202      	movs	r2, #2
 800127c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	2b02      	cmp	r3, #2
 8001284:	d060      	beq.n	8001348 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d102      	bne.n	8001294 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800128e:	2310      	movs	r3, #16
 8001290:	617b      	str	r3, [r7, #20]
 8001292:	e001      	b.n	8001298 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001294:	2320      	movs	r3, #32
 8001296:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	2b20      	cmp	r3, #32
 800129e:	d802      	bhi.n	80012a6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80012a6:	2001      	movs	r0, #1
 80012a8:	f001 fbd0 	bl	8002a4c <HAL_RCCEx_GetPeriphCLKFreq>
 80012ac:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	691b      	ldr	r3, [r3, #16]
 80012b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012b6:	d125      	bne.n	8001304 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d010      	beq.n	80012e2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	68fa      	ldr	r2, [r7, #12]
 80012c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80012ca:	4613      	mov	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	4413      	add	r3, r2
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	461a      	mov	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	695b      	ldr	r3, [r3, #20]
 80012d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80012dc:	3305      	adds	r3, #5
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	e01f      	b.n	8001322 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	00db      	lsls	r3, r3, #3
 80012e6:	68fa      	ldr	r2, [r7, #12]
 80012e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80012ec:	4613      	mov	r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	4413      	add	r3, r2
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	461a      	mov	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fe:	3305      	adds	r3, #5
 8001300:	613b      	str	r3, [r7, #16]
 8001302:	e00e      	b.n	8001322 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001304:	68fa      	ldr	r2, [r7, #12]
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	fbb2 f2f3 	udiv	r2, r2, r3
 800130c:	4613      	mov	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	4413      	add	r3, r2
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	461a      	mov	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	695b      	ldr	r3, [r3, #20]
 800131a:	fbb2 f3f3 	udiv	r3, r2, r3
 800131e:	3305      	adds	r3, #5
 8001320:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	4a5c      	ldr	r2, [pc, #368]	; (8001498 <HAL_I2S_Init+0x270>)
 8001326:	fba2 2303 	umull	r2, r3, r2, r3
 800132a:	08db      	lsrs	r3, r3, #3
 800132c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	f003 0301 	and.w	r3, r3, #1
 8001334:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	085b      	lsrs	r3, r3, #1
 800133e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	021b      	lsls	r3, r3, #8
 8001344:	61bb      	str	r3, [r7, #24]
 8001346:	e003      	b.n	8001350 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001348:	2302      	movs	r3, #2
 800134a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800134c:	2300      	movs	r3, #0
 800134e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d902      	bls.n	800135c <HAL_I2S_Init+0x134>
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	2bff      	cmp	r3, #255	; 0xff
 800135a:	d907      	bls.n	800136c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001360:	f043 0210 	orr.w	r2, r3, #16
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e08f      	b.n	800148c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	691a      	ldr	r2, [r3, #16]
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	ea42 0103 	orr.w	r1, r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	69fa      	ldr	r2, [r7, #28]
 800137c:	430a      	orrs	r2, r1
 800137e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800138a:	f023 030f 	bic.w	r3, r3, #15
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	6851      	ldr	r1, [r2, #4]
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	6892      	ldr	r2, [r2, #8]
 8001396:	4311      	orrs	r1, r2
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	68d2      	ldr	r2, [r2, #12]
 800139c:	4311      	orrs	r1, r2
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	6992      	ldr	r2, [r2, #24]
 80013a2:	430a      	orrs	r2, r1
 80013a4:	431a      	orrs	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013ae:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a1b      	ldr	r3, [r3, #32]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d161      	bne.n	800147c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a38      	ldr	r2, [pc, #224]	; (800149c <HAL_I2S_Init+0x274>)
 80013bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a37      	ldr	r2, [pc, #220]	; (80014a0 <HAL_I2S_Init+0x278>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d101      	bne.n	80013cc <HAL_I2S_Init+0x1a4>
 80013c8:	4b36      	ldr	r3, [pc, #216]	; (80014a4 <HAL_I2S_Init+0x27c>)
 80013ca:	e001      	b.n	80013d0 <HAL_I2S_Init+0x1a8>
 80013cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	6812      	ldr	r2, [r2, #0]
 80013d6:	4932      	ldr	r1, [pc, #200]	; (80014a0 <HAL_I2S_Init+0x278>)
 80013d8:	428a      	cmp	r2, r1
 80013da:	d101      	bne.n	80013e0 <HAL_I2S_Init+0x1b8>
 80013dc:	4a31      	ldr	r2, [pc, #196]	; (80014a4 <HAL_I2S_Init+0x27c>)
 80013de:	e001      	b.n	80013e4 <HAL_I2S_Init+0x1bc>
 80013e0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80013e4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80013e8:	f023 030f 	bic.w	r3, r3, #15
 80013ec:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a2b      	ldr	r2, [pc, #172]	; (80014a0 <HAL_I2S_Init+0x278>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d101      	bne.n	80013fc <HAL_I2S_Init+0x1d4>
 80013f8:	4b2a      	ldr	r3, [pc, #168]	; (80014a4 <HAL_I2S_Init+0x27c>)
 80013fa:	e001      	b.n	8001400 <HAL_I2S_Init+0x1d8>
 80013fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001400:	2202      	movs	r2, #2
 8001402:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a25      	ldr	r2, [pc, #148]	; (80014a0 <HAL_I2S_Init+0x278>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d101      	bne.n	8001412 <HAL_I2S_Init+0x1ea>
 800140e:	4b25      	ldr	r3, [pc, #148]	; (80014a4 <HAL_I2S_Init+0x27c>)
 8001410:	e001      	b.n	8001416 <HAL_I2S_Init+0x1ee>
 8001412:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001416:	69db      	ldr	r3, [r3, #28]
 8001418:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001422:	d003      	beq.n	800142c <HAL_I2S_Init+0x204>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d103      	bne.n	8001434 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800142c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001430:	613b      	str	r3, [r7, #16]
 8001432:	e001      	b.n	8001438 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001434:	2300      	movs	r3, #0
 8001436:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	b299      	uxth	r1, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800144e:	4303      	orrs	r3, r0
 8001450:	b29b      	uxth	r3, r3
 8001452:	430b      	orrs	r3, r1
 8001454:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001456:	4313      	orrs	r3, r2
 8001458:	b29a      	uxth	r2, r3
 800145a:	897b      	ldrh	r3, [r7, #10]
 800145c:	4313      	orrs	r3, r2
 800145e:	b29b      	uxth	r3, r3
 8001460:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001464:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a0d      	ldr	r2, [pc, #52]	; (80014a0 <HAL_I2S_Init+0x278>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d101      	bne.n	8001474 <HAL_I2S_Init+0x24c>
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <HAL_I2S_Init+0x27c>)
 8001472:	e001      	b.n	8001478 <HAL_I2S_Init+0x250>
 8001474:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001478:	897a      	ldrh	r2, [r7, #10]
 800147a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2201      	movs	r2, #1
 8001486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	3720      	adds	r7, #32
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	0800159f 	.word	0x0800159f
 8001498:	cccccccd 	.word	0xcccccccd
 800149c:	080019c9 	.word	0x080019c9
 80014a0:	40003800 	.word	0x40003800
 80014a4:	40003400 	.word	0x40003400

080014a8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f0:	881a      	ldrh	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fc:	1c9a      	adds	r2, r3, #2
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001506:	b29b      	uxth	r3, r3
 8001508:	3b01      	subs	r3, #1
 800150a:	b29a      	uxth	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001514:	b29b      	uxth	r3, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d10e      	bne.n	8001538 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001528:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2201      	movs	r2, #1
 800152e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7ff ffb8 	bl	80014a8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001538:	bf00      	nop
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	68da      	ldr	r2, [r3, #12]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001552:	b292      	uxth	r2, r2
 8001554:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155a:	1c9a      	adds	r2, r3, #2
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001564:	b29b      	uxth	r3, r3
 8001566:	3b01      	subs	r3, #1
 8001568:	b29a      	uxth	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001572:	b29b      	uxth	r3, r3
 8001574:	2b00      	cmp	r3, #0
 8001576:	d10e      	bne.n	8001596 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001586:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2201      	movs	r2, #1
 800158c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff ff93 	bl	80014bc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b086      	sub	sp, #24
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b04      	cmp	r3, #4
 80015b8:	d13a      	bne.n	8001630 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d109      	bne.n	80015d8 <I2S_IRQHandler+0x3a>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ce:	2b40      	cmp	r3, #64	; 0x40
 80015d0:	d102      	bne.n	80015d8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff ffb4 	bl	8001540 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015de:	2b40      	cmp	r3, #64	; 0x40
 80015e0:	d126      	bne.n	8001630 <I2S_IRQHandler+0x92>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f003 0320 	and.w	r3, r3, #32
 80015ec:	2b20      	cmp	r3, #32
 80015ee:	d11f      	bne.n	8001630 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80015fe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001600:	2300      	movs	r3, #0
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	613b      	str	r3, [r7, #16]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2201      	movs	r2, #1
 800161a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001622:	f043 0202 	orr.w	r2, r3, #2
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f7ff ff50 	bl	80014d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001636:	b2db      	uxtb	r3, r3
 8001638:	2b03      	cmp	r3, #3
 800163a:	d136      	bne.n	80016aa <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b02      	cmp	r3, #2
 8001644:	d109      	bne.n	800165a <I2S_IRQHandler+0xbc>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001650:	2b80      	cmp	r3, #128	; 0x80
 8001652:	d102      	bne.n	800165a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff ff45 	bl	80014e4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	f003 0308 	and.w	r3, r3, #8
 8001660:	2b08      	cmp	r3, #8
 8001662:	d122      	bne.n	80016aa <I2S_IRQHandler+0x10c>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f003 0320 	and.w	r3, r3, #32
 800166e:	2b20      	cmp	r3, #32
 8001670:	d11b      	bne.n	80016aa <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	685a      	ldr	r2, [r3, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001680:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169c:	f043 0204 	orr.w	r2, r3, #4
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f7ff ff13 	bl	80014d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80016aa:	bf00      	nop
 80016ac:	3718      	adds	r7, #24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
	...

080016b4 <HAL_I2SEx_TransmitReceive_DMA>:
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pTxData, uint16_t *pRxData,
                                                uint16_t Size)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b088      	sub	sp, #32
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
 80016c0:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 80016c6:	2300      	movs	r3, #0
 80016c8:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80016ca:	2300      	movs	r3, #0
 80016cc:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d002      	beq.n	80016e0 <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 80016da:	2302      	movs	r3, #2
 80016dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80016de:	e160      	b.n	80019a2 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d005      	beq.n	80016f2 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d002      	beq.n	80016f2 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 80016ec:	887b      	ldrh	r3, [r7, #2]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e15a      	b.n	80019ac <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d101      	bne.n	8001706 <HAL_I2SEx_TransmitReceive_DMA+0x52>
 8001702:	2302      	movs	r3, #2
 8001704:	e152      	b.n	80019ac <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2201      	movs	r2, #1
 800170a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 800170e:	68ba      	ldr	r2, [r7, #8]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	69db      	ldr	r3, [r3, #28]
 8001720:	f003 0307 	and.w	r3, r3, #7
 8001724:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	2b03      	cmp	r3, #3
 800172a:	d002      	beq.n	8001732 <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	2b05      	cmp	r3, #5
 8001730:	d114      	bne.n	800175c <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 8001732:	887b      	ldrh	r3, [r7, #2]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	b29a      	uxth	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 800173c:	887b      	ldrh	r3, [r7, #2]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	b29a      	uxth	r2, r3
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 8001746:	887b      	ldrh	r3, [r7, #2]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	b29a      	uxth	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8001750:	887b      	ldrh	r3, [r7, #2]
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	b29a      	uxth	r2, r3
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	865a      	strh	r2, [r3, #50]	; 0x32
 800175a:	e00b      	b.n	8001774 <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	887a      	ldrh	r2, [r7, #2]
 8001760:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	887a      	ldrh	r2, [r7, #2]
 8001766:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	887a      	ldrh	r2, [r7, #2]
 800176c:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	887a      	ldrh	r2, [r7, #2]
 8001772:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2200      	movs	r2, #0
 8001778:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2205      	movs	r2, #5
 800177e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001786:	4a8b      	ldr	r2, [pc, #556]	; (80019b4 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8001788:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800178e:	4a8a      	ldr	r2, [pc, #552]	; (80019b8 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8001790:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001796:	4a89      	ldr	r2, [pc, #548]	; (80019bc <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8001798:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback  = I2SEx_TxRxDMAHalfCplt;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800179e:	4a85      	ldr	r2, [pc, #532]	; (80019b4 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 80017a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a6:	4a84      	ldr	r2, [pc, #528]	; (80019b8 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 80017a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ae:	4a83      	ldr	r2, [pc, #524]	; (80019bc <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 80017b0:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	69db      	ldr	r3, [r3, #28]
 80017b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017bc:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017c4:	d002      	beq.n	80017cc <HAL_I2SEx_TransmitReceive_DMA+0x118>
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d16b      	bne.n	80018a4 <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a79      	ldr	r2, [pc, #484]	; (80019c0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d101      	bne.n	80017e2 <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 80017de:	4b79      	ldr	r3, [pc, #484]	; (80019c4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80017e0:	e001      	b.n	80017e6 <HAL_I2SEx_TransmitReceive_DMA+0x132>
 80017e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80017e6:	330c      	adds	r3, #12
 80017e8:	4619      	mov	r1, r3
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	f7ff f898 	bl	8000928 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a70      	ldr	r2, [pc, #448]	; (80019c0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d101      	bne.n	8001806 <HAL_I2SEx_TransmitReceive_DMA+0x152>
 8001802:	4b70      	ldr	r3, [pc, #448]	; (80019c4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8001804:	e001      	b.n	800180a <HAL_I2SEx_TransmitReceive_DMA+0x156>
 8001806:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	496b      	ldr	r1, [pc, #428]	; (80019c0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8001812:	428b      	cmp	r3, r1
 8001814:	d101      	bne.n	800181a <HAL_I2SEx_TransmitReceive_DMA+0x166>
 8001816:	4b6b      	ldr	r3, [pc, #428]	; (80019c4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8001818:	e001      	b.n	800181e <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 800181a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800181e:	f042 0201 	orr.w	r2, r2, #1
 8001822:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8001824:	f107 0308 	add.w	r3, r7, #8
 8001828:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	6819      	ldr	r1, [r3, #0]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	330c      	adds	r3, #12
 8001838:	461a      	mov	r2, r3
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800183e:	b29b      	uxth	r3, r3
 8001840:	f7ff f872 	bl	8000928 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	685a      	ldr	r2, [r3, #4]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f042 0202 	orr.w	r2, r2, #2
 8001852:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001862:	f000 809e 	beq.w	80019a2 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a55      	ldr	r2, [pc, #340]	; (80019c0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d101      	bne.n	8001874 <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 8001870:	4b54      	ldr	r3, [pc, #336]	; (80019c4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8001872:	e001      	b.n	8001878 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 8001874:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001878:	69da      	ldr	r2, [r3, #28]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4950      	ldr	r1, [pc, #320]	; (80019c0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8001880:	428b      	cmp	r3, r1
 8001882:	d101      	bne.n	8001888 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 8001884:	4b4f      	ldr	r3, [pc, #316]	; (80019c4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8001886:	e001      	b.n	800188c <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 8001888:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800188c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001890:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	69da      	ldr	r2, [r3, #28]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80018a0:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80018a2:	e07e      	b.n	80019a2 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80018b2:	d10a      	bne.n	80018ca <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80018b4:	2300      	movs	r3, #0
 80018b6:	613b      	str	r3, [r7, #16]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	613b      	str	r3, [r7, #16]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	613b      	str	r3, [r7, #16]
 80018c8:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 80018ca:	f107 0308 	add.w	r3, r7, #8
 80018ce:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	6819      	ldr	r1, [r3, #0]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a38      	ldr	r2, [pc, #224]	; (80019c0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d101      	bne.n	80018e6 <HAL_I2SEx_TransmitReceive_DMA+0x232>
 80018e2:	4b38      	ldr	r3, [pc, #224]	; (80019c4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80018e4:	e001      	b.n	80018ea <HAL_I2SEx_TransmitReceive_DMA+0x236>
 80018e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80018ea:	330c      	adds	r3, #12
 80018ec:	461a      	mov	r2, r3
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	f7ff f818 	bl	8000928 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a30      	ldr	r2, [pc, #192]	; (80019c0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d101      	bne.n	8001906 <HAL_I2SEx_TransmitReceive_DMA+0x252>
 8001902:	4b30      	ldr	r3, [pc, #192]	; (80019c4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8001904:	e001      	b.n	800190a <HAL_I2SEx_TransmitReceive_DMA+0x256>
 8001906:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	492b      	ldr	r1, [pc, #172]	; (80019c0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8001912:	428b      	cmp	r3, r1
 8001914:	d101      	bne.n	800191a <HAL_I2SEx_TransmitReceive_DMA+0x266>
 8001916:	4b2b      	ldr	r3, [pc, #172]	; (80019c4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8001918:	e001      	b.n	800191e <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 800191a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800191e:	f042 0202 	orr.w	r2, r2, #2
 8001922:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8001924:	1d3b      	adds	r3, r7, #4
 8001926:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	330c      	adds	r3, #12
 8001932:	4619      	mov	r1, r3
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800193c:	b29b      	uxth	r3, r3
 800193e:	f7fe fff3 	bl	8000928 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f042 0201 	orr.w	r2, r2, #1
 8001950:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	69db      	ldr	r3, [r3, #28]
 8001958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800195c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001960:	d01e      	beq.n	80019a0 <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a16      	ldr	r2, [pc, #88]	; (80019c0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d101      	bne.n	8001970 <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 800196c:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800196e:	e001      	b.n	8001974 <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 8001970:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001974:	69da      	ldr	r2, [r3, #28]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4911      	ldr	r1, [pc, #68]	; (80019c0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800197c:	428b      	cmp	r3, r1
 800197e:	d101      	bne.n	8001984 <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 8001980:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8001982:	e001      	b.n	8001988 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 8001984:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001988:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800198c:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	69da      	ldr	r2, [r3, #28]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800199c:	61da      	str	r2, [r3, #28]
 800199e:	e000      	b.n	80019a2 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 80019a0:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 80019aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3720      	adds	r7, #32
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	08001c71 	.word	0x08001c71
 80019b8:	08001c8d 	.word	0x08001c8d
 80019bc:	08001dc5 	.word	0x08001dc5
 80019c0:	40003800 	.word	0x40003800
 80019c4:	40003400 	.word	0x40003400

080019c8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b088      	sub	sp, #32
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a92      	ldr	r2, [pc, #584]	; (8001c28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d101      	bne.n	80019e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80019e2:	4b92      	ldr	r3, [pc, #584]	; (8001c2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80019e4:	e001      	b.n	80019ea <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80019e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a8b      	ldr	r2, [pc, #556]	; (8001c28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d101      	bne.n	8001a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001a00:	4b8a      	ldr	r3, [pc, #552]	; (8001c2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001a02:	e001      	b.n	8001a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001a04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a14:	d004      	beq.n	8001a20 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f040 8099 	bne.w	8001b52 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d107      	bne.n	8001a3a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d002      	beq.n	8001a3a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 fa05 	bl	8001e44 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d107      	bne.n	8001a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d002      	beq.n	8001a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 faa8 	bl	8001fa4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a5a:	2b40      	cmp	r3, #64	; 0x40
 8001a5c:	d13a      	bne.n	8001ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	f003 0320 	and.w	r3, r3, #32
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d035      	beq.n	8001ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a6e      	ldr	r2, [pc, #440]	; (8001c28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d101      	bne.n	8001a76 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001a72:	4b6e      	ldr	r3, [pc, #440]	; (8001c2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001a74:	e001      	b.n	8001a7a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001a76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a7a:	685a      	ldr	r2, [r3, #4]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4969      	ldr	r1, [pc, #420]	; (8001c28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001a82:	428b      	cmp	r3, r1
 8001a84:	d101      	bne.n	8001a8a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001a86:	4b69      	ldr	r3, [pc, #420]	; (8001c2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001a88:	e001      	b.n	8001a8e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001a8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a8e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001a92:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	685a      	ldr	r2, [r3, #4]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001aa2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2201      	movs	r2, #1
 8001abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac6:	f043 0202 	orr.w	r2, r3, #2
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff fcfe 	bl	80014d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f003 0308 	and.w	r3, r3, #8
 8001ada:	2b08      	cmp	r3, #8
 8001adc:	f040 80c3 	bne.w	8001c66 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	f003 0320 	and.w	r3, r3, #32
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f000 80bd 	beq.w	8001c66 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001afa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a49      	ldr	r2, [pc, #292]	; (8001c28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d101      	bne.n	8001b0a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001b06:	4b49      	ldr	r3, [pc, #292]	; (8001c2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001b08:	e001      	b.n	8001b0e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001b0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b0e:	685a      	ldr	r2, [r3, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4944      	ldr	r1, [pc, #272]	; (8001c28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001b16:	428b      	cmp	r3, r1
 8001b18:	d101      	bne.n	8001b1e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001b1a:	4b44      	ldr	r3, [pc, #272]	; (8001c2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001b1c:	e001      	b.n	8001b22 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001b1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b22:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b26:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60bb      	str	r3, [r7, #8]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	60bb      	str	r3, [r7, #8]
 8001b34:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b42:	f043 0204 	orr.w	r2, r3, #4
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7ff fcc0 	bl	80014d0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001b50:	e089      	b.n	8001c66 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d107      	bne.n	8001b6c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d002      	beq.n	8001b6c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 f99e 	bl	8001ea8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d107      	bne.n	8001b86 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d002      	beq.n	8001b86 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 f9dd 	bl	8001f40 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b8c:	2b40      	cmp	r3, #64	; 0x40
 8001b8e:	d12f      	bne.n	8001bf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	f003 0320 	and.w	r3, r3, #32
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d02a      	beq.n	8001bf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ba8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a1e      	ldr	r2, [pc, #120]	; (8001c28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d101      	bne.n	8001bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001bb4:	4b1d      	ldr	r3, [pc, #116]	; (8001c2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001bb6:	e001      	b.n	8001bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001bb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001bbc:	685a      	ldr	r2, [r3, #4]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4919      	ldr	r1, [pc, #100]	; (8001c28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001bc4:	428b      	cmp	r3, r1
 8001bc6:	d101      	bne.n	8001bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001bc8:	4b18      	ldr	r3, [pc, #96]	; (8001c2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001bca:	e001      	b.n	8001bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001bcc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001bd0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001bd4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be2:	f043 0202 	orr.w	r2, r3, #2
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff fc70 	bl	80014d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	f003 0308 	and.w	r3, r3, #8
 8001bf6:	2b08      	cmp	r3, #8
 8001bf8:	d136      	bne.n	8001c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	f003 0320 	and.w	r3, r3, #32
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d031      	beq.n	8001c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a07      	ldr	r2, [pc, #28]	; (8001c28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d101      	bne.n	8001c12 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001c0e:	4b07      	ldr	r3, [pc, #28]	; (8001c2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001c10:	e001      	b.n	8001c16 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001c12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4902      	ldr	r1, [pc, #8]	; (8001c28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001c1e:	428b      	cmp	r3, r1
 8001c20:	d106      	bne.n	8001c30 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8001c22:	4b02      	ldr	r3, [pc, #8]	; (8001c2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001c24:	e006      	b.n	8001c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8001c26:	bf00      	nop
 8001c28:	40003800 	.word	0x40003800
 8001c2c:	40003400 	.word	0x40003400
 8001c30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c34:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001c38:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	685a      	ldr	r2, [r3, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001c48:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c56:	f043 0204 	orr.w	r2, r3, #4
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff fc36 	bl	80014d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001c64:	e000      	b.n	8001c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001c66:	bf00      	nop
}
 8001c68:	bf00      	nop
 8001c6a:	3720      	adds	r7, #32
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c7c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f001 f94c 	bl	8002f1c <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001c84:	bf00      	nop
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c98:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f040 8084 	bne.w	8001dac <I2SEx_TxRxDMACplt+0x120>
  {
    if (hi2s->hdmarx == hdma)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d13c      	bne.n	8001d28 <I2SEx_TxRxDMACplt+0x9c>
    {
      /* Disable Rx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	69db      	ldr	r3, [r3, #28]
 8001cb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cbc:	d006      	beq.n	8001ccc <I2SEx_TxRxDMACplt+0x40>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	69db      	ldr	r3, [r3, #28]
 8001cc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d116      	bne.n	8001cfa <I2SEx_TxRxDMACplt+0x6e>
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a3a      	ldr	r2, [pc, #232]	; (8001dbc <I2SEx_TxRxDMACplt+0x130>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d101      	bne.n	8001cda <I2SEx_TxRxDMACplt+0x4e>
 8001cd6:	4b3a      	ldr	r3, [pc, #232]	; (8001dc0 <I2SEx_TxRxDMACplt+0x134>)
 8001cd8:	e001      	b.n	8001cde <I2SEx_TxRxDMACplt+0x52>
 8001cda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4935      	ldr	r1, [pc, #212]	; (8001dbc <I2SEx_TxRxDMACplt+0x130>)
 8001ce6:	428b      	cmp	r3, r1
 8001ce8:	d101      	bne.n	8001cee <I2SEx_TxRxDMACplt+0x62>
 8001cea:	4b35      	ldr	r3, [pc, #212]	; (8001dc0 <I2SEx_TxRxDMACplt+0x134>)
 8001cec:	e001      	b.n	8001cf2 <I2SEx_TxRxDMACplt+0x66>
 8001cee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cf2:	f022 0201 	bic.w	r2, r2, #1
 8001cf6:	605a      	str	r2, [r3, #4]
 8001cf8:	e007      	b.n	8001d0a <I2SEx_TxRxDMACplt+0x7e>
      }
      else
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 0201 	bic.w	r2, r2, #1
 8001d08:	605a      	str	r2, [r3, #4]
      }

      hi2s->RxXferCount = 0U;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	865a      	strh	r2, [r3, #50]	; 0x32

      if (hi2s->TxXferCount == 0U)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d106      	bne.n	8001d28 <I2SEx_TxRxDMACplt+0x9c>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f001 faba 	bl	800329c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }

    if (hi2s->hdmatx == hdma)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d13c      	bne.n	8001dac <I2SEx_TxRxDMACplt+0x120>
    {
      /* Disable Tx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	69db      	ldr	r3, [r3, #28]
 8001d38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d40:	d006      	beq.n	8001d50 <I2SEx_TxRxDMACplt+0xc4>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	69db      	ldr	r3, [r3, #28]
 8001d48:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d108      	bne.n	8001d62 <I2SEx_TxRxDMACplt+0xd6>
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	685a      	ldr	r2, [r3, #4]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 0202 	bic.w	r2, r2, #2
 8001d5e:	605a      	str	r2, [r3, #4]
 8001d60:	e015      	b.n	8001d8e <I2SEx_TxRxDMACplt+0x102>
      }
      else
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a15      	ldr	r2, [pc, #84]	; (8001dbc <I2SEx_TxRxDMACplt+0x130>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d101      	bne.n	8001d70 <I2SEx_TxRxDMACplt+0xe4>
 8001d6c:	4b14      	ldr	r3, [pc, #80]	; (8001dc0 <I2SEx_TxRxDMACplt+0x134>)
 8001d6e:	e001      	b.n	8001d74 <I2SEx_TxRxDMACplt+0xe8>
 8001d70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4910      	ldr	r1, [pc, #64]	; (8001dbc <I2SEx_TxRxDMACplt+0x130>)
 8001d7c:	428b      	cmp	r3, r1
 8001d7e:	d101      	bne.n	8001d84 <I2SEx_TxRxDMACplt+0xf8>
 8001d80:	4b0f      	ldr	r3, [pc, #60]	; (8001dc0 <I2SEx_TxRxDMACplt+0x134>)
 8001d82:	e001      	b.n	8001d88 <I2SEx_TxRxDMACplt+0xfc>
 8001d84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d88:	f022 0202 	bic.w	r2, r2, #2
 8001d8c:	605a      	str	r2, [r3, #4]
      }

      hi2s->TxXferCount = 0U;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2200      	movs	r2, #0
 8001d92:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2s->RxXferCount == 0U)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d106      	bne.n	8001dac <I2SEx_TxRxDMACplt+0x120>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2201      	movs	r2, #1
 8001da2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f001 fa78 	bl	800329c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }
  }
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	f001 fa75 	bl	800329c <HAL_I2SEx_TxRxCpltCallback>
}
 8001db2:	bf00      	nop
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40003800 	.word	0x40003800
 8001dc0:	40003400 	.word	0x40003400

08001dc4 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd0:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 0203 	bic.w	r2, r2, #3
 8001de0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a15      	ldr	r2, [pc, #84]	; (8001e3c <I2SEx_TxRxDMAError+0x78>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d101      	bne.n	8001df0 <I2SEx_TxRxDMAError+0x2c>
 8001dec:	4b14      	ldr	r3, [pc, #80]	; (8001e40 <I2SEx_TxRxDMAError+0x7c>)
 8001dee:	e001      	b.n	8001df4 <I2SEx_TxRxDMAError+0x30>
 8001df0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4910      	ldr	r1, [pc, #64]	; (8001e3c <I2SEx_TxRxDMAError+0x78>)
 8001dfc:	428b      	cmp	r3, r1
 8001dfe:	d101      	bne.n	8001e04 <I2SEx_TxRxDMAError+0x40>
 8001e00:	4b0f      	ldr	r3, [pc, #60]	; (8001e40 <I2SEx_TxRxDMAError+0x7c>)
 8001e02:	e001      	b.n	8001e08 <I2SEx_TxRxDMAError+0x44>
 8001e04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e08:	f022 0203 	bic.w	r2, r2, #3
 8001e0c:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2200      	movs	r2, #0
 8001e12:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2200      	movs	r2, #0
 8001e18:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e26:	f043 0208 	orr.w	r2, r3, #8
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f7ff fb4e 	bl	80014d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001e34:	bf00      	nop
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40003800 	.word	0x40003800
 8001e40:	40003400 	.word	0x40003400

08001e44 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e50:	1c99      	adds	r1, r3, #2
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	6251      	str	r1, [r2, #36]	; 0x24
 8001e56:	881a      	ldrh	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	3b01      	subs	r3, #1
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d113      	bne.n	8001e9e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	685a      	ldr	r2, [r3, #4]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e84:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d106      	bne.n	8001e9e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f001 f9ff 	bl	800329c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001e9e:	bf00      	nop
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
	...

08001ea8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb4:	1c99      	adds	r1, r3, #2
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	6251      	str	r1, [r2, #36]	; 0x24
 8001eba:	8819      	ldrh	r1, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a1d      	ldr	r2, [pc, #116]	; (8001f38 <I2SEx_TxISR_I2SExt+0x90>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d101      	bne.n	8001eca <I2SEx_TxISR_I2SExt+0x22>
 8001ec6:	4b1d      	ldr	r3, [pc, #116]	; (8001f3c <I2SEx_TxISR_I2SExt+0x94>)
 8001ec8:	e001      	b.n	8001ece <I2SEx_TxISR_I2SExt+0x26>
 8001eca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ece:	460a      	mov	r2, r1
 8001ed0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d121      	bne.n	8001f2e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a12      	ldr	r2, [pc, #72]	; (8001f38 <I2SEx_TxISR_I2SExt+0x90>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d101      	bne.n	8001ef8 <I2SEx_TxISR_I2SExt+0x50>
 8001ef4:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <I2SEx_TxISR_I2SExt+0x94>)
 8001ef6:	e001      	b.n	8001efc <I2SEx_TxISR_I2SExt+0x54>
 8001ef8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	490d      	ldr	r1, [pc, #52]	; (8001f38 <I2SEx_TxISR_I2SExt+0x90>)
 8001f04:	428b      	cmp	r3, r1
 8001f06:	d101      	bne.n	8001f0c <I2SEx_TxISR_I2SExt+0x64>
 8001f08:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <I2SEx_TxISR_I2SExt+0x94>)
 8001f0a:	e001      	b.n	8001f10 <I2SEx_TxISR_I2SExt+0x68>
 8001f0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f10:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f14:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d106      	bne.n	8001f2e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f001 f9b7 	bl	800329c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40003800 	.word	0x40003800
 8001f3c:	40003400 	.word	0x40003400

08001f40 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68d8      	ldr	r0, [r3, #12]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f52:	1c99      	adds	r1, r3, #2
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001f58:	b282      	uxth	r2, r0
 8001f5a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	3b01      	subs	r3, #1
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d113      	bne.n	8001f9c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f82:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d106      	bne.n	8001f9c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f001 f980 	bl	800329c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001f9c:	bf00      	nop
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a20      	ldr	r2, [pc, #128]	; (8002034 <I2SEx_RxISR_I2SExt+0x90>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d101      	bne.n	8001fba <I2SEx_RxISR_I2SExt+0x16>
 8001fb6:	4b20      	ldr	r3, [pc, #128]	; (8002038 <I2SEx_RxISR_I2SExt+0x94>)
 8001fb8:	e001      	b.n	8001fbe <I2SEx_RxISR_I2SExt+0x1a>
 8001fba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fbe:	68d8      	ldr	r0, [r3, #12]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc4:	1c99      	adds	r1, r3, #2
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001fca:	b282      	uxth	r2, r0
 8001fcc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d121      	bne.n	800202a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a12      	ldr	r2, [pc, #72]	; (8002034 <I2SEx_RxISR_I2SExt+0x90>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d101      	bne.n	8001ff4 <I2SEx_RxISR_I2SExt+0x50>
 8001ff0:	4b11      	ldr	r3, [pc, #68]	; (8002038 <I2SEx_RxISR_I2SExt+0x94>)
 8001ff2:	e001      	b.n	8001ff8 <I2SEx_RxISR_I2SExt+0x54>
 8001ff4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ff8:	685a      	ldr	r2, [r3, #4]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	490d      	ldr	r1, [pc, #52]	; (8002034 <I2SEx_RxISR_I2SExt+0x90>)
 8002000:	428b      	cmp	r3, r1
 8002002:	d101      	bne.n	8002008 <I2SEx_RxISR_I2SExt+0x64>
 8002004:	4b0c      	ldr	r3, [pc, #48]	; (8002038 <I2SEx_RxISR_I2SExt+0x94>)
 8002006:	e001      	b.n	800200c <I2SEx_RxISR_I2SExt+0x68>
 8002008:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800200c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002010:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002016:	b29b      	uxth	r3, r3
 8002018:	2b00      	cmp	r3, #0
 800201a:	d106      	bne.n	800202a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f001 f939 	bl	800329c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800202a:	bf00      	nop
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40003800 	.word	0x40003800
 8002038:	40003400 	.word	0x40003400

0800203c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e22a      	b.n	80024a4 <HAL_RCC_OscConfig+0x468>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d075      	beq.n	8002146 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800205a:	4b88      	ldr	r3, [pc, #544]	; (800227c <HAL_RCC_OscConfig+0x240>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 030c 	and.w	r3, r3, #12
 8002062:	2b04      	cmp	r3, #4
 8002064:	d00c      	beq.n	8002080 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002066:	4b85      	ldr	r3, [pc, #532]	; (800227c <HAL_RCC_OscConfig+0x240>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800206e:	2b08      	cmp	r3, #8
 8002070:	d112      	bne.n	8002098 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002072:	4b82      	ldr	r3, [pc, #520]	; (800227c <HAL_RCC_OscConfig+0x240>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800207a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800207e:	d10b      	bne.n	8002098 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002080:	4b7e      	ldr	r3, [pc, #504]	; (800227c <HAL_RCC_OscConfig+0x240>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d05b      	beq.n	8002144 <HAL_RCC_OscConfig+0x108>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d157      	bne.n	8002144 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e205      	b.n	80024a4 <HAL_RCC_OscConfig+0x468>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020a0:	d106      	bne.n	80020b0 <HAL_RCC_OscConfig+0x74>
 80020a2:	4b76      	ldr	r3, [pc, #472]	; (800227c <HAL_RCC_OscConfig+0x240>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a75      	ldr	r2, [pc, #468]	; (800227c <HAL_RCC_OscConfig+0x240>)
 80020a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ac:	6013      	str	r3, [r2, #0]
 80020ae:	e01d      	b.n	80020ec <HAL_RCC_OscConfig+0xb0>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020b8:	d10c      	bne.n	80020d4 <HAL_RCC_OscConfig+0x98>
 80020ba:	4b70      	ldr	r3, [pc, #448]	; (800227c <HAL_RCC_OscConfig+0x240>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a6f      	ldr	r2, [pc, #444]	; (800227c <HAL_RCC_OscConfig+0x240>)
 80020c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020c4:	6013      	str	r3, [r2, #0]
 80020c6:	4b6d      	ldr	r3, [pc, #436]	; (800227c <HAL_RCC_OscConfig+0x240>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a6c      	ldr	r2, [pc, #432]	; (800227c <HAL_RCC_OscConfig+0x240>)
 80020cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d0:	6013      	str	r3, [r2, #0]
 80020d2:	e00b      	b.n	80020ec <HAL_RCC_OscConfig+0xb0>
 80020d4:	4b69      	ldr	r3, [pc, #420]	; (800227c <HAL_RCC_OscConfig+0x240>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a68      	ldr	r2, [pc, #416]	; (800227c <HAL_RCC_OscConfig+0x240>)
 80020da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020de:	6013      	str	r3, [r2, #0]
 80020e0:	4b66      	ldr	r3, [pc, #408]	; (800227c <HAL_RCC_OscConfig+0x240>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a65      	ldr	r2, [pc, #404]	; (800227c <HAL_RCC_OscConfig+0x240>)
 80020e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d013      	beq.n	800211c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f4:	f7fe fa4c 	bl	8000590 <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020fc:	f7fe fa48 	bl	8000590 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b64      	cmp	r3, #100	; 0x64
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e1ca      	b.n	80024a4 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210e:	4b5b      	ldr	r3, [pc, #364]	; (800227c <HAL_RCC_OscConfig+0x240>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d0f0      	beq.n	80020fc <HAL_RCC_OscConfig+0xc0>
 800211a:	e014      	b.n	8002146 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211c:	f7fe fa38 	bl	8000590 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002124:	f7fe fa34 	bl	8000590 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b64      	cmp	r3, #100	; 0x64
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e1b6      	b.n	80024a4 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002136:	4b51      	ldr	r3, [pc, #324]	; (800227c <HAL_RCC_OscConfig+0x240>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f0      	bne.n	8002124 <HAL_RCC_OscConfig+0xe8>
 8002142:	e000      	b.n	8002146 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002144:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d063      	beq.n	800221a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002152:	4b4a      	ldr	r3, [pc, #296]	; (800227c <HAL_RCC_OscConfig+0x240>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f003 030c 	and.w	r3, r3, #12
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00b      	beq.n	8002176 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800215e:	4b47      	ldr	r3, [pc, #284]	; (800227c <HAL_RCC_OscConfig+0x240>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002166:	2b08      	cmp	r3, #8
 8002168:	d11c      	bne.n	80021a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800216a:	4b44      	ldr	r3, [pc, #272]	; (800227c <HAL_RCC_OscConfig+0x240>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d116      	bne.n	80021a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002176:	4b41      	ldr	r3, [pc, #260]	; (800227c <HAL_RCC_OscConfig+0x240>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d005      	beq.n	800218e <HAL_RCC_OscConfig+0x152>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d001      	beq.n	800218e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e18a      	b.n	80024a4 <HAL_RCC_OscConfig+0x468>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800218e:	4b3b      	ldr	r3, [pc, #236]	; (800227c <HAL_RCC_OscConfig+0x240>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	4937      	ldr	r1, [pc, #220]	; (800227c <HAL_RCC_OscConfig+0x240>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021a2:	e03a      	b.n	800221a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d020      	beq.n	80021ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021ac:	4b34      	ldr	r3, [pc, #208]	; (8002280 <HAL_RCC_OscConfig+0x244>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b2:	f7fe f9ed 	bl	8000590 <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021ba:	f7fe f9e9 	bl	8000590 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e16b      	b.n	80024a4 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021cc:	4b2b      	ldr	r3, [pc, #172]	; (800227c <HAL_RCC_OscConfig+0x240>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0f0      	beq.n	80021ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d8:	4b28      	ldr	r3, [pc, #160]	; (800227c <HAL_RCC_OscConfig+0x240>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	4925      	ldr	r1, [pc, #148]	; (800227c <HAL_RCC_OscConfig+0x240>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	600b      	str	r3, [r1, #0]
 80021ec:	e015      	b.n	800221a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ee:	4b24      	ldr	r3, [pc, #144]	; (8002280 <HAL_RCC_OscConfig+0x244>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f4:	f7fe f9cc 	bl	8000590 <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021fc:	f7fe f9c8 	bl	8000590 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e14a      	b.n	80024a4 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800220e:	4b1b      	ldr	r3, [pc, #108]	; (800227c <HAL_RCC_OscConfig+0x240>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f0      	bne.n	80021fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0308 	and.w	r3, r3, #8
 8002222:	2b00      	cmp	r3, #0
 8002224:	d036      	beq.n	8002294 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d016      	beq.n	800225c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800222e:	4b15      	ldr	r3, [pc, #84]	; (8002284 <HAL_RCC_OscConfig+0x248>)
 8002230:	2201      	movs	r2, #1
 8002232:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002234:	f7fe f9ac 	bl	8000590 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800223c:	f7fe f9a8 	bl	8000590 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e12a      	b.n	80024a4 <HAL_RCC_OscConfig+0x468>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800224e:	4b0b      	ldr	r3, [pc, #44]	; (800227c <HAL_RCC_OscConfig+0x240>)
 8002250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0f0      	beq.n	800223c <HAL_RCC_OscConfig+0x200>
 800225a:	e01b      	b.n	8002294 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800225c:	4b09      	ldr	r3, [pc, #36]	; (8002284 <HAL_RCC_OscConfig+0x248>)
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002262:	f7fe f995 	bl	8000590 <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002268:	e00e      	b.n	8002288 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800226a:	f7fe f991 	bl	8000590 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d907      	bls.n	8002288 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e113      	b.n	80024a4 <HAL_RCC_OscConfig+0x468>
 800227c:	40023800 	.word	0x40023800
 8002280:	42470000 	.word	0x42470000
 8002284:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002288:	4b88      	ldr	r3, [pc, #544]	; (80024ac <HAL_RCC_OscConfig+0x470>)
 800228a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1ea      	bne.n	800226a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0304 	and.w	r3, r3, #4
 800229c:	2b00      	cmp	r3, #0
 800229e:	f000 8097 	beq.w	80023d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022a2:	2300      	movs	r3, #0
 80022a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022a6:	4b81      	ldr	r3, [pc, #516]	; (80024ac <HAL_RCC_OscConfig+0x470>)
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10f      	bne.n	80022d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	4b7d      	ldr	r3, [pc, #500]	; (80024ac <HAL_RCC_OscConfig+0x470>)
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	4a7c      	ldr	r2, [pc, #496]	; (80024ac <HAL_RCC_OscConfig+0x470>)
 80022bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022c0:	6413      	str	r3, [r2, #64]	; 0x40
 80022c2:	4b7a      	ldr	r3, [pc, #488]	; (80024ac <HAL_RCC_OscConfig+0x470>)
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80022ce:	2301      	movs	r3, #1
 80022d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d2:	4b77      	ldr	r3, [pc, #476]	; (80024b0 <HAL_RCC_OscConfig+0x474>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d118      	bne.n	8002310 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022de:	4b74      	ldr	r3, [pc, #464]	; (80024b0 <HAL_RCC_OscConfig+0x474>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a73      	ldr	r2, [pc, #460]	; (80024b0 <HAL_RCC_OscConfig+0x474>)
 80022e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ea:	f7fe f951 	bl	8000590 <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f0:	e008      	b.n	8002304 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022f2:	f7fe f94d 	bl	8000590 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e0cf      	b.n	80024a4 <HAL_RCC_OscConfig+0x468>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002304:	4b6a      	ldr	r3, [pc, #424]	; (80024b0 <HAL_RCC_OscConfig+0x474>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800230c:	2b00      	cmp	r3, #0
 800230e:	d0f0      	beq.n	80022f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d106      	bne.n	8002326 <HAL_RCC_OscConfig+0x2ea>
 8002318:	4b64      	ldr	r3, [pc, #400]	; (80024ac <HAL_RCC_OscConfig+0x470>)
 800231a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231c:	4a63      	ldr	r2, [pc, #396]	; (80024ac <HAL_RCC_OscConfig+0x470>)
 800231e:	f043 0301 	orr.w	r3, r3, #1
 8002322:	6713      	str	r3, [r2, #112]	; 0x70
 8002324:	e01c      	b.n	8002360 <HAL_RCC_OscConfig+0x324>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	2b05      	cmp	r3, #5
 800232c:	d10c      	bne.n	8002348 <HAL_RCC_OscConfig+0x30c>
 800232e:	4b5f      	ldr	r3, [pc, #380]	; (80024ac <HAL_RCC_OscConfig+0x470>)
 8002330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002332:	4a5e      	ldr	r2, [pc, #376]	; (80024ac <HAL_RCC_OscConfig+0x470>)
 8002334:	f043 0304 	orr.w	r3, r3, #4
 8002338:	6713      	str	r3, [r2, #112]	; 0x70
 800233a:	4b5c      	ldr	r3, [pc, #368]	; (80024ac <HAL_RCC_OscConfig+0x470>)
 800233c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233e:	4a5b      	ldr	r2, [pc, #364]	; (80024ac <HAL_RCC_OscConfig+0x470>)
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	6713      	str	r3, [r2, #112]	; 0x70
 8002346:	e00b      	b.n	8002360 <HAL_RCC_OscConfig+0x324>
 8002348:	4b58      	ldr	r3, [pc, #352]	; (80024ac <HAL_RCC_OscConfig+0x470>)
 800234a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234c:	4a57      	ldr	r2, [pc, #348]	; (80024ac <HAL_RCC_OscConfig+0x470>)
 800234e:	f023 0301 	bic.w	r3, r3, #1
 8002352:	6713      	str	r3, [r2, #112]	; 0x70
 8002354:	4b55      	ldr	r3, [pc, #340]	; (80024ac <HAL_RCC_OscConfig+0x470>)
 8002356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002358:	4a54      	ldr	r2, [pc, #336]	; (80024ac <HAL_RCC_OscConfig+0x470>)
 800235a:	f023 0304 	bic.w	r3, r3, #4
 800235e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d015      	beq.n	8002394 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002368:	f7fe f912 	bl	8000590 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800236e:	e00a      	b.n	8002386 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002370:	f7fe f90e 	bl	8000590 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	f241 3288 	movw	r2, #5000	; 0x1388
 800237e:	4293      	cmp	r3, r2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e08e      	b.n	80024a4 <HAL_RCC_OscConfig+0x468>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002386:	4b49      	ldr	r3, [pc, #292]	; (80024ac <HAL_RCC_OscConfig+0x470>)
 8002388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d0ee      	beq.n	8002370 <HAL_RCC_OscConfig+0x334>
 8002392:	e014      	b.n	80023be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002394:	f7fe f8fc 	bl	8000590 <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800239a:	e00a      	b.n	80023b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800239c:	f7fe f8f8 	bl	8000590 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e078      	b.n	80024a4 <HAL_RCC_OscConfig+0x468>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b2:	4b3e      	ldr	r3, [pc, #248]	; (80024ac <HAL_RCC_OscConfig+0x470>)
 80023b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1ee      	bne.n	800239c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023be:	7dfb      	ldrb	r3, [r7, #23]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d105      	bne.n	80023d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c4:	4b39      	ldr	r3, [pc, #228]	; (80024ac <HAL_RCC_OscConfig+0x470>)
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	4a38      	ldr	r2, [pc, #224]	; (80024ac <HAL_RCC_OscConfig+0x470>)
 80023ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d064      	beq.n	80024a2 <HAL_RCC_OscConfig+0x466>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023d8:	4b34      	ldr	r3, [pc, #208]	; (80024ac <HAL_RCC_OscConfig+0x470>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 030c 	and.w	r3, r3, #12
 80023e0:	2b08      	cmp	r3, #8
 80023e2:	d05c      	beq.n	800249e <HAL_RCC_OscConfig+0x462>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d141      	bne.n	8002470 <HAL_RCC_OscConfig+0x434>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ec:	4b31      	ldr	r3, [pc, #196]	; (80024b4 <HAL_RCC_OscConfig+0x478>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f2:	f7fe f8cd 	bl	8000590 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x3d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023fa:	f7fe f8c9 	bl	8000590 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x3d0>
          {
            return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e04b      	b.n	80024a4 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800240c:	4b27      	ldr	r3, [pc, #156]	; (80024ac <HAL_RCC_OscConfig+0x470>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1f0      	bne.n	80023fa <HAL_RCC_OscConfig+0x3be>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	69da      	ldr	r2, [r3, #28]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	431a      	orrs	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002426:	019b      	lsls	r3, r3, #6
 8002428:	431a      	orrs	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242e:	085b      	lsrs	r3, r3, #1
 8002430:	3b01      	subs	r3, #1
 8002432:	041b      	lsls	r3, r3, #16
 8002434:	431a      	orrs	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243a:	061b      	lsls	r3, r3, #24
 800243c:	491b      	ldr	r1, [pc, #108]	; (80024ac <HAL_RCC_OscConfig+0x470>)
 800243e:	4313      	orrs	r3, r2
 8002440:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002442:	4b1c      	ldr	r3, [pc, #112]	; (80024b4 <HAL_RCC_OscConfig+0x478>)
 8002444:	2201      	movs	r2, #1
 8002446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002448:	f7fe f8a2 	bl	8000590 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002450:	f7fe f89e 	bl	8000590 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e020      	b.n	80024a4 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002462:	4b12      	ldr	r3, [pc, #72]	; (80024ac <HAL_RCC_OscConfig+0x470>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0f0      	beq.n	8002450 <HAL_RCC_OscConfig+0x414>
 800246e:	e018      	b.n	80024a2 <HAL_RCC_OscConfig+0x466>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002470:	4b10      	ldr	r3, [pc, #64]	; (80024b4 <HAL_RCC_OscConfig+0x478>)
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002476:	f7fe f88b 	bl	8000590 <HAL_GetTick>
 800247a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800247c:	e008      	b.n	8002490 <HAL_RCC_OscConfig+0x454>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800247e:	f7fe f887 	bl	8000590 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d901      	bls.n	8002490 <HAL_RCC_OscConfig+0x454>
          {
            return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e009      	b.n	80024a4 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002490:	4b06      	ldr	r3, [pc, #24]	; (80024ac <HAL_RCC_OscConfig+0x470>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1f0      	bne.n	800247e <HAL_RCC_OscConfig+0x442>
 800249c:	e001      	b.n	80024a2 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e000      	b.n	80024a4 <HAL_RCC_OscConfig+0x468>
    }
  }
  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40023800 	.word	0x40023800
 80024b0:	40007000 	.word	0x40007000
 80024b4:	42470060 	.word	0x42470060

080024b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e0ca      	b.n	8002662 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024cc:	4b67      	ldr	r3, [pc, #412]	; (800266c <HAL_RCC_ClockConfig+0x1b4>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 030f 	and.w	r3, r3, #15
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d90c      	bls.n	80024f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024da:	4b64      	ldr	r3, [pc, #400]	; (800266c <HAL_RCC_ClockConfig+0x1b4>)
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	b2d2      	uxtb	r2, r2
 80024e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e2:	4b62      	ldr	r3, [pc, #392]	; (800266c <HAL_RCC_ClockConfig+0x1b4>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 030f 	and.w	r3, r3, #15
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d001      	beq.n	80024f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e0b6      	b.n	8002662 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d020      	beq.n	8002542 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0304 	and.w	r3, r3, #4
 8002508:	2b00      	cmp	r3, #0
 800250a:	d005      	beq.n	8002518 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800250c:	4b58      	ldr	r3, [pc, #352]	; (8002670 <HAL_RCC_ClockConfig+0x1b8>)
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	4a57      	ldr	r2, [pc, #348]	; (8002670 <HAL_RCC_ClockConfig+0x1b8>)
 8002512:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002516:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0308 	and.w	r3, r3, #8
 8002520:	2b00      	cmp	r3, #0
 8002522:	d005      	beq.n	8002530 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002524:	4b52      	ldr	r3, [pc, #328]	; (8002670 <HAL_RCC_ClockConfig+0x1b8>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	4a51      	ldr	r2, [pc, #324]	; (8002670 <HAL_RCC_ClockConfig+0x1b8>)
 800252a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800252e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002530:	4b4f      	ldr	r3, [pc, #316]	; (8002670 <HAL_RCC_ClockConfig+0x1b8>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	494c      	ldr	r1, [pc, #304]	; (8002670 <HAL_RCC_ClockConfig+0x1b8>)
 800253e:	4313      	orrs	r3, r2
 8002540:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b00      	cmp	r3, #0
 800254c:	d044      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d107      	bne.n	8002566 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002556:	4b46      	ldr	r3, [pc, #280]	; (8002670 <HAL_RCC_ClockConfig+0x1b8>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d119      	bne.n	8002596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e07d      	b.n	8002662 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b02      	cmp	r3, #2
 800256c:	d003      	beq.n	8002576 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002572:	2b03      	cmp	r3, #3
 8002574:	d107      	bne.n	8002586 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002576:	4b3e      	ldr	r3, [pc, #248]	; (8002670 <HAL_RCC_ClockConfig+0x1b8>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d109      	bne.n	8002596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e06d      	b.n	8002662 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002586:	4b3a      	ldr	r3, [pc, #232]	; (8002670 <HAL_RCC_ClockConfig+0x1b8>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e065      	b.n	8002662 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002596:	4b36      	ldr	r3, [pc, #216]	; (8002670 <HAL_RCC_ClockConfig+0x1b8>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f023 0203 	bic.w	r2, r3, #3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	4933      	ldr	r1, [pc, #204]	; (8002670 <HAL_RCC_ClockConfig+0x1b8>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025a8:	f7fd fff2 	bl	8000590 <HAL_GetTick>
 80025ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ae:	e00a      	b.n	80025c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025b0:	f7fd ffee 	bl	8000590 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80025be:	4293      	cmp	r3, r2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e04d      	b.n	8002662 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c6:	4b2a      	ldr	r3, [pc, #168]	; (8002670 <HAL_RCC_ClockConfig+0x1b8>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 020c 	and.w	r2, r3, #12
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d1eb      	bne.n	80025b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025d8:	4b24      	ldr	r3, [pc, #144]	; (800266c <HAL_RCC_ClockConfig+0x1b4>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 030f 	and.w	r3, r3, #15
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d20c      	bcs.n	8002600 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e6:	4b21      	ldr	r3, [pc, #132]	; (800266c <HAL_RCC_ClockConfig+0x1b4>)
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ee:	4b1f      	ldr	r3, [pc, #124]	; (800266c <HAL_RCC_ClockConfig+0x1b4>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d001      	beq.n	8002600 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e030      	b.n	8002662 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0304 	and.w	r3, r3, #4
 8002608:	2b00      	cmp	r3, #0
 800260a:	d008      	beq.n	800261e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800260c:	4b18      	ldr	r3, [pc, #96]	; (8002670 <HAL_RCC_ClockConfig+0x1b8>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	4915      	ldr	r1, [pc, #84]	; (8002670 <HAL_RCC_ClockConfig+0x1b8>)
 800261a:	4313      	orrs	r3, r2
 800261c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0308 	and.w	r3, r3, #8
 8002626:	2b00      	cmp	r3, #0
 8002628:	d009      	beq.n	800263e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800262a:	4b11      	ldr	r3, [pc, #68]	; (8002670 <HAL_RCC_ClockConfig+0x1b8>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	490d      	ldr	r1, [pc, #52]	; (8002670 <HAL_RCC_ClockConfig+0x1b8>)
 800263a:	4313      	orrs	r3, r2
 800263c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800263e:	f000 f81d 	bl	800267c <HAL_RCC_GetSysClockFreq>
 8002642:	4602      	mov	r2, r0
 8002644:	4b0a      	ldr	r3, [pc, #40]	; (8002670 <HAL_RCC_ClockConfig+0x1b8>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	091b      	lsrs	r3, r3, #4
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	4909      	ldr	r1, [pc, #36]	; (8002674 <HAL_RCC_ClockConfig+0x1bc>)
 8002650:	5ccb      	ldrb	r3, [r1, r3]
 8002652:	fa22 f303 	lsr.w	r3, r2, r3
 8002656:	4a08      	ldr	r2, [pc, #32]	; (8002678 <HAL_RCC_ClockConfig+0x1c0>)
 8002658:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800265a:	2000      	movs	r0, #0
 800265c:	f7fd ff54 	bl	8000508 <HAL_InitTick>

  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	40023c00 	.word	0x40023c00
 8002670:	40023800 	.word	0x40023800
 8002674:	08003e2c 	.word	0x08003e2c
 8002678:	20000008 	.word	0x20000008

0800267c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800267c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002680:	b094      	sub	sp, #80	; 0x50
 8002682:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002684:	2300      	movs	r3, #0
 8002686:	647b      	str	r3, [r7, #68]	; 0x44
 8002688:	2300      	movs	r3, #0
 800268a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800268c:	2300      	movs	r3, #0
 800268e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002690:	2300      	movs	r3, #0
 8002692:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002694:	4b79      	ldr	r3, [pc, #484]	; (800287c <HAL_RCC_GetSysClockFreq+0x200>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f003 030c 	and.w	r3, r3, #12
 800269c:	2b08      	cmp	r3, #8
 800269e:	d00d      	beq.n	80026bc <HAL_RCC_GetSysClockFreq+0x40>
 80026a0:	2b08      	cmp	r3, #8
 80026a2:	f200 80e1 	bhi.w	8002868 <HAL_RCC_GetSysClockFreq+0x1ec>
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d002      	beq.n	80026b0 <HAL_RCC_GetSysClockFreq+0x34>
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	d003      	beq.n	80026b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80026ae:	e0db      	b.n	8002868 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026b0:	4b73      	ldr	r3, [pc, #460]	; (8002880 <HAL_RCC_GetSysClockFreq+0x204>)
 80026b2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80026b4:	e0db      	b.n	800286e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026b6:	4b73      	ldr	r3, [pc, #460]	; (8002884 <HAL_RCC_GetSysClockFreq+0x208>)
 80026b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026ba:	e0d8      	b.n	800286e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026bc:	4b6f      	ldr	r3, [pc, #444]	; (800287c <HAL_RCC_GetSysClockFreq+0x200>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026c4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026c6:	4b6d      	ldr	r3, [pc, #436]	; (800287c <HAL_RCC_GetSysClockFreq+0x200>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d063      	beq.n	800279a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026d2:	4b6a      	ldr	r3, [pc, #424]	; (800287c <HAL_RCC_GetSysClockFreq+0x200>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	099b      	lsrs	r3, r3, #6
 80026d8:	2200      	movs	r2, #0
 80026da:	63bb      	str	r3, [r7, #56]	; 0x38
 80026dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80026de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026e4:	633b      	str	r3, [r7, #48]	; 0x30
 80026e6:	2300      	movs	r3, #0
 80026e8:	637b      	str	r3, [r7, #52]	; 0x34
 80026ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80026ee:	4622      	mov	r2, r4
 80026f0:	462b      	mov	r3, r5
 80026f2:	f04f 0000 	mov.w	r0, #0
 80026f6:	f04f 0100 	mov.w	r1, #0
 80026fa:	0159      	lsls	r1, r3, #5
 80026fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002700:	0150      	lsls	r0, r2, #5
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	4621      	mov	r1, r4
 8002708:	1a51      	subs	r1, r2, r1
 800270a:	6139      	str	r1, [r7, #16]
 800270c:	4629      	mov	r1, r5
 800270e:	eb63 0301 	sbc.w	r3, r3, r1
 8002712:	617b      	str	r3, [r7, #20]
 8002714:	f04f 0200 	mov.w	r2, #0
 8002718:	f04f 0300 	mov.w	r3, #0
 800271c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002720:	4659      	mov	r1, fp
 8002722:	018b      	lsls	r3, r1, #6
 8002724:	4651      	mov	r1, sl
 8002726:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800272a:	4651      	mov	r1, sl
 800272c:	018a      	lsls	r2, r1, #6
 800272e:	4651      	mov	r1, sl
 8002730:	ebb2 0801 	subs.w	r8, r2, r1
 8002734:	4659      	mov	r1, fp
 8002736:	eb63 0901 	sbc.w	r9, r3, r1
 800273a:	f04f 0200 	mov.w	r2, #0
 800273e:	f04f 0300 	mov.w	r3, #0
 8002742:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002746:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800274a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800274e:	4690      	mov	r8, r2
 8002750:	4699      	mov	r9, r3
 8002752:	4623      	mov	r3, r4
 8002754:	eb18 0303 	adds.w	r3, r8, r3
 8002758:	60bb      	str	r3, [r7, #8]
 800275a:	462b      	mov	r3, r5
 800275c:	eb49 0303 	adc.w	r3, r9, r3
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	f04f 0200 	mov.w	r2, #0
 8002766:	f04f 0300 	mov.w	r3, #0
 800276a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800276e:	4629      	mov	r1, r5
 8002770:	024b      	lsls	r3, r1, #9
 8002772:	4621      	mov	r1, r4
 8002774:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002778:	4621      	mov	r1, r4
 800277a:	024a      	lsls	r2, r1, #9
 800277c:	4610      	mov	r0, r2
 800277e:	4619      	mov	r1, r3
 8002780:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002782:	2200      	movs	r2, #0
 8002784:	62bb      	str	r3, [r7, #40]	; 0x28
 8002786:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002788:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800278c:	f7fd fd1c 	bl	80001c8 <__aeabi_uldivmod>
 8002790:	4602      	mov	r2, r0
 8002792:	460b      	mov	r3, r1
 8002794:	4613      	mov	r3, r2
 8002796:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002798:	e058      	b.n	800284c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800279a:	4b38      	ldr	r3, [pc, #224]	; (800287c <HAL_RCC_GetSysClockFreq+0x200>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	099b      	lsrs	r3, r3, #6
 80027a0:	2200      	movs	r2, #0
 80027a2:	4618      	mov	r0, r3
 80027a4:	4611      	mov	r1, r2
 80027a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027aa:	623b      	str	r3, [r7, #32]
 80027ac:	2300      	movs	r3, #0
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24
 80027b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80027b4:	4642      	mov	r2, r8
 80027b6:	464b      	mov	r3, r9
 80027b8:	f04f 0000 	mov.w	r0, #0
 80027bc:	f04f 0100 	mov.w	r1, #0
 80027c0:	0159      	lsls	r1, r3, #5
 80027c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027c6:	0150      	lsls	r0, r2, #5
 80027c8:	4602      	mov	r2, r0
 80027ca:	460b      	mov	r3, r1
 80027cc:	4641      	mov	r1, r8
 80027ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80027d2:	4649      	mov	r1, r9
 80027d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80027d8:	f04f 0200 	mov.w	r2, #0
 80027dc:	f04f 0300 	mov.w	r3, #0
 80027e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80027e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80027e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80027ec:	ebb2 040a 	subs.w	r4, r2, sl
 80027f0:	eb63 050b 	sbc.w	r5, r3, fp
 80027f4:	f04f 0200 	mov.w	r2, #0
 80027f8:	f04f 0300 	mov.w	r3, #0
 80027fc:	00eb      	lsls	r3, r5, #3
 80027fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002802:	00e2      	lsls	r2, r4, #3
 8002804:	4614      	mov	r4, r2
 8002806:	461d      	mov	r5, r3
 8002808:	4643      	mov	r3, r8
 800280a:	18e3      	adds	r3, r4, r3
 800280c:	603b      	str	r3, [r7, #0]
 800280e:	464b      	mov	r3, r9
 8002810:	eb45 0303 	adc.w	r3, r5, r3
 8002814:	607b      	str	r3, [r7, #4]
 8002816:	f04f 0200 	mov.w	r2, #0
 800281a:	f04f 0300 	mov.w	r3, #0
 800281e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002822:	4629      	mov	r1, r5
 8002824:	028b      	lsls	r3, r1, #10
 8002826:	4621      	mov	r1, r4
 8002828:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800282c:	4621      	mov	r1, r4
 800282e:	028a      	lsls	r2, r1, #10
 8002830:	4610      	mov	r0, r2
 8002832:	4619      	mov	r1, r3
 8002834:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002836:	2200      	movs	r2, #0
 8002838:	61bb      	str	r3, [r7, #24]
 800283a:	61fa      	str	r2, [r7, #28]
 800283c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002840:	f7fd fcc2 	bl	80001c8 <__aeabi_uldivmod>
 8002844:	4602      	mov	r2, r0
 8002846:	460b      	mov	r3, r1
 8002848:	4613      	mov	r3, r2
 800284a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800284c:	4b0b      	ldr	r3, [pc, #44]	; (800287c <HAL_RCC_GetSysClockFreq+0x200>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	0c1b      	lsrs	r3, r3, #16
 8002852:	f003 0303 	and.w	r3, r3, #3
 8002856:	3301      	adds	r3, #1
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800285c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800285e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002860:	fbb2 f3f3 	udiv	r3, r2, r3
 8002864:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002866:	e002      	b.n	800286e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002868:	4b05      	ldr	r3, [pc, #20]	; (8002880 <HAL_RCC_GetSysClockFreq+0x204>)
 800286a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800286c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800286e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002870:	4618      	mov	r0, r3
 8002872:	3750      	adds	r7, #80	; 0x50
 8002874:	46bd      	mov	sp, r7
 8002876:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800287a:	bf00      	nop
 800287c:	40023800 	.word	0x40023800
 8002880:	00f42400 	.word	0x00f42400
 8002884:	007a1200 	.word	0x007a1200

08002888 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002890:	2300      	movs	r3, #0
 8002892:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002894:	2300      	movs	r3, #0
 8002896:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d105      	bne.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d035      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80028b0:	4b62      	ldr	r3, [pc, #392]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80028b6:	f7fd fe6b 	bl	8000590 <HAL_GetTick>
 80028ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80028bc:	e008      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80028be:	f7fd fe67 	bl	8000590 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e0b0      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80028d0:	4b5b      	ldr	r3, [pc, #364]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1f0      	bne.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	019a      	lsls	r2, r3, #6
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	071b      	lsls	r3, r3, #28
 80028e8:	4955      	ldr	r1, [pc, #340]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80028f0:	4b52      	ldr	r3, [pc, #328]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80028f2:	2201      	movs	r2, #1
 80028f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80028f6:	f7fd fe4b 	bl	8000590 <HAL_GetTick>
 80028fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028fc:	e008      	b.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80028fe:	f7fd fe47 	bl	8000590 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d901      	bls.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e090      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002910:	4b4b      	ldr	r3, [pc, #300]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0f0      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 8083 	beq.w	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800292a:	2300      	movs	r3, #0
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	4b44      	ldr	r3, [pc, #272]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	4a43      	ldr	r2, [pc, #268]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002938:	6413      	str	r3, [r2, #64]	; 0x40
 800293a:	4b41      	ldr	r3, [pc, #260]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002946:	4b3f      	ldr	r3, [pc, #252]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a3e      	ldr	r2, [pc, #248]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800294c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002950:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002952:	f7fd fe1d 	bl	8000590 <HAL_GetTick>
 8002956:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002958:	e008      	b.n	800296c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800295a:	f7fd fe19 	bl	8000590 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d901      	bls.n	800296c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e062      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800296c:	4b35      	ldr	r3, [pc, #212]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0f0      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002978:	4b31      	ldr	r3, [pc, #196]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800297a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002980:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d02f      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	429a      	cmp	r2, r3
 8002994:	d028      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002996:	4b2a      	ldr	r3, [pc, #168]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800299e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029a0:	4b29      	ldr	r3, [pc, #164]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029a6:	4b28      	ldr	r3, [pc, #160]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80029ac:	4a24      	ldr	r2, [pc, #144]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80029b2:	4b23      	ldr	r3, [pc, #140]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80029b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d114      	bne.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80029be:	f7fd fde7 	bl	8000590 <HAL_GetTick>
 80029c2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c4:	e00a      	b.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029c6:	f7fd fde3 	bl	8000590 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d901      	bls.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e02a      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029dc:	4b18      	ldr	r3, [pc, #96]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80029de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0ee      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029f4:	d10d      	bne.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80029f6:	4b12      	ldr	r3, [pc, #72]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002a06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a0a:	490d      	ldr	r1, [pc, #52]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	608b      	str	r3, [r1, #8]
 8002a10:	e005      	b.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002a12:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	4a0a      	ldr	r2, [pc, #40]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002a18:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002a1c:	6093      	str	r3, [r2, #8]
 8002a1e:	4b08      	ldr	r3, [pc, #32]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002a20:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a2a:	4905      	ldr	r1, [pc, #20]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3718      	adds	r7, #24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	42470068 	.word	0x42470068
 8002a40:	40023800 	.word	0x40023800
 8002a44:	40007000 	.word	0x40007000
 8002a48:	42470e40 	.word	0x42470e40

08002a4c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b087      	sub	sp, #28
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8002a60:	2300      	movs	r3, #0
 8002a62:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d13e      	bne.n	8002ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002a6a:	4b23      	ldr	r3, [pc, #140]	; (8002af8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d005      	beq.n	8002a86 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d12f      	bne.n	8002ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8002a80:	4b1e      	ldr	r3, [pc, #120]	; (8002afc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002a82:	617b      	str	r3, [r7, #20]
          break;
 8002a84:	e02f      	b.n	8002ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002a86:	4b1c      	ldr	r3, [pc, #112]	; (8002af8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a92:	d108      	bne.n	8002aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002a94:	4b18      	ldr	r3, [pc, #96]	; (8002af8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a9c:	4a18      	ldr	r2, [pc, #96]	; (8002b00 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa2:	613b      	str	r3, [r7, #16]
 8002aa4:	e007      	b.n	8002ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002aa6:	4b14      	ldr	r3, [pc, #80]	; (8002af8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002aae:	4a15      	ldr	r2, [pc, #84]	; (8002b04 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8002ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002ab6:	4b10      	ldr	r3, [pc, #64]	; (8002af8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8002ab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002abc:	099b      	lsrs	r3, r3, #6
 8002abe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	fb02 f303 	mul.w	r3, r2, r3
 8002ac8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002aca:	4b0b      	ldr	r3, [pc, #44]	; (8002af8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8002acc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ad0:	0f1b      	lsrs	r3, r3, #28
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	68ba      	ldr	r2, [r7, #8]
 8002ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002adc:	617b      	str	r3, [r7, #20]
          break;
 8002ade:	e002      	b.n	8002ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	617b      	str	r3, [r7, #20]
          break;
 8002ae4:	bf00      	nop
        }
      }
      break;
 8002ae6:	bf00      	nop
    }
  }
  return frequency;
 8002ae8:	697b      	ldr	r3, [r7, #20]
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	371c      	adds	r7, #28
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	40023800 	.word	0x40023800
 8002afc:	00bb8000 	.word	0x00bb8000
 8002b00:	007a1200 	.word	0x007a1200
 8002b04:	00f42400 	.word	0x00f42400

08002b08 <main>:
float a_90, a_91, a_92, b_91, b_92;

uint16_t rxBuf[8];
uint16_t txBuf[8];
int main(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
 HAL_Init();
 8002b0c:	f7fd fcda 	bl	80004c4 <HAL_Init>

  SystemClock_Config();
 8002b10:	f000 fd84 	bl	800361c <SystemClock_Config>

  MX_GPIO_Init();
 8002b14:	f000 fe5c 	bl	80037d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002b18:	f000 fe32 	bl	8003780 <MX_DMA_Init>
  MX_I2S2_Init();
 8002b1c:	f000 fe00 	bl	8003720 <MX_I2S2_Init>

  HAL_I2SEx_TransmitReceive_DMA (&hi2s2, txBuf, rxBuf, 4);
 8002b20:	2304      	movs	r3, #4
 8002b22:	4a5d      	ldr	r2, [pc, #372]	; (8002c98 <main+0x190>)
 8002b24:	495d      	ldr	r1, [pc, #372]	; (8002c9c <main+0x194>)
 8002b26:	485e      	ldr	r0, [pc, #376]	; (8002ca0 <main+0x198>)
 8002b28:	f7fe fdc4 	bl	80016b4 <HAL_I2SEx_TransmitReceive_DMA>


  //left-channel, High-Pass, 1kHz, fs=96kHz, q=0.7
  l_a0 = 0.9543457485325094f;
 8002b2c:	4b5d      	ldr	r3, [pc, #372]	; (8002ca4 <main+0x19c>)
 8002b2e:	4a5e      	ldr	r2, [pc, #376]	; (8002ca8 <main+0x1a0>)
 8002b30:	601a      	str	r2, [r3, #0]
  l_a1 = -1.9086914970650188f;
 8002b32:	4b5e      	ldr	r3, [pc, #376]	; (8002cac <main+0x1a4>)
 8002b34:	4a5e      	ldr	r2, [pc, #376]	; (8002cb0 <main+0x1a8>)
 8002b36:	601a      	str	r2, [r3, #0]
  l_a2 = 0.9543457485325094f;
 8002b38:	4b5e      	ldr	r3, [pc, #376]	; (8002cb4 <main+0x1ac>)
 8002b3a:	4a5b      	ldr	r2, [pc, #364]	; (8002ca8 <main+0x1a0>)
 8002b3c:	601a      	str	r2, [r3, #0]
  l_b1 = -1.9066459797557103f;
 8002b3e:	4b5e      	ldr	r3, [pc, #376]	; (8002cb8 <main+0x1b0>)
 8002b40:	4a5e      	ldr	r2, [pc, #376]	; (8002cbc <main+0x1b4>)
 8002b42:	601a      	str	r2, [r3, #0]
  l_b2 = 0.9107370143743273f;
 8002b44:	4b5e      	ldr	r3, [pc, #376]	; (8002cc0 <main+0x1b8>)
 8002b46:	4a5f      	ldr	r2, [pc, #380]	; (8002cc4 <main+0x1bc>)
 8002b48:	601a      	str	r2, [r3, #0]

  //right-channel, Low-Pass, 1kHz, fs)96 kHz, q=0.7
  r_a0 = 0.0010227586546542474f;
 8002b4a:	4b5f      	ldr	r3, [pc, #380]	; (8002cc8 <main+0x1c0>)
 8002b4c:	4a5f      	ldr	r2, [pc, #380]	; (8002ccc <main+0x1c4>)
 8002b4e:	601a      	str	r2, [r3, #0]
  r_a1 = 0.002045517309308495f;
 8002b50:	4b5f      	ldr	r3, [pc, #380]	; (8002cd0 <main+0x1c8>)
 8002b52:	4a60      	ldr	r2, [pc, #384]	; (8002cd4 <main+0x1cc>)
 8002b54:	601a      	str	r2, [r3, #0]
  r_a2 = 0.0010227586546542474f;
 8002b56:	4b60      	ldr	r3, [pc, #384]	; (8002cd8 <main+0x1d0>)
 8002b58:	4a5c      	ldr	r2, [pc, #368]	; (8002ccc <main+0x1c4>)
 8002b5a:	601a      	str	r2, [r3, #0]
  r_b1 = -1.9066459797557103f;
 8002b5c:	4b5f      	ldr	r3, [pc, #380]	; (8002cdc <main+0x1d4>)
 8002b5e:	4a57      	ldr	r2, [pc, #348]	; (8002cbc <main+0x1b4>)
 8002b60:	601a      	str	r2, [r3, #0]
  r_b2 = 0.9107370143743273f;
 8002b62:	4b5f      	ldr	r3, [pc, #380]	; (8002ce0 <main+0x1d8>)
 8002b64:	4a57      	ldr	r2, [pc, #348]	; (8002cc4 <main+0x1bc>)
 8002b66:	601a      	str	r2, [r3, #0]

  // HD600 Filter 1: ON LSC Fc 105 Hz Gain 6.4 dB Q 0.70
  a_00 = 1.002166885885848;
 8002b68:	4b5e      	ldr	r3, [pc, #376]	; (8002ce4 <main+0x1dc>)
 8002b6a:	4a5f      	ldr	r2, [pc, #380]	; (8002ce8 <main+0x1e0>)
 8002b6c:	601a      	str	r2, [r3, #0]
  a_01 = -1.9902556715873885;
 8002b6e:	4b5f      	ldr	r3, [pc, #380]	; (8002cec <main+0x1e4>)
 8002b70:	4a5f      	ldr	r2, [pc, #380]	; (8002cf0 <main+0x1e8>)
 8002b72:	601a      	str	r2, [r3, #0]
  a_02 = 0.988186980588655;
 8002b74:	4b5f      	ldr	r3, [pc, #380]	; (8002cf4 <main+0x1ec>)
 8002b76:	4a60      	ldr	r2, [pc, #384]	; (8002cf8 <main+0x1f0>)
 8002b78:	601a      	str	r2, [r3, #0]
  b_01 = -1.9902812695170031;
 8002b7a:	4b60      	ldr	r3, [pc, #384]	; (8002cfc <main+0x1f4>)
 8002b7c:	4a60      	ldr	r2, [pc, #384]	; (8002d00 <main+0x1f8>)
 8002b7e:	601a      	str	r2, [r3, #0]
  b_02 = 0.9903282685448882;
 8002b80:	4b60      	ldr	r3, [pc, #384]	; (8002d04 <main+0x1fc>)
 8002b82:	4a61      	ldr	r2, [pc, #388]	; (8002d08 <main+0x200>)
 8002b84:	601a      	str	r2, [r3, #0]

  // HD600 Filter 2: ON PK Fc 9090 Hz Gain 4.3 dB Q 2.25
  a_10 = 1.0709469081822147;
 8002b86:	4b61      	ldr	r3, [pc, #388]	; (8002d0c <main+0x204>)
 8002b88:	4a61      	ldr	r2, [pc, #388]	; (8002d10 <main+0x208>)
 8002b8a:	601a      	str	r2, [r3, #0]
  a_11 = -1.4729186894638182;
 8002b8c:	4b61      	ldr	r3, [pc, #388]	; (8002d14 <main+0x20c>)
 8002b8e:	4a62      	ldr	r2, [pc, #392]	; (8002d18 <main+0x210>)
 8002b90:	601a      	str	r2, [r3, #0]
  a_12 = 0.7075481251435357;
 8002b92:	4b62      	ldr	r3, [pc, #392]	; (8002d1c <main+0x214>)
 8002b94:	4a62      	ldr	r2, [pc, #392]	; (8002d20 <main+0x218>)
 8002b96:	601a      	str	r2, [r3, #0]
  b_11 = -1.4729186894638182;
 8002b98:	4b62      	ldr	r3, [pc, #392]	; (8002d24 <main+0x21c>)
 8002b9a:	4a5f      	ldr	r2, [pc, #380]	; (8002d18 <main+0x210>)
 8002b9c:	601a      	str	r2, [r3, #0]
  b_12 = 0.7784950333257503;
 8002b9e:	4b62      	ldr	r3, [pc, #392]	; (8002d28 <main+0x220>)
 8002ba0:	4a62      	ldr	r2, [pc, #392]	; (8002d2c <main+0x224>)
 8002ba2:	601a      	str	r2, [r3, #0]

  // HD600 Filter 3: ON PK Fc 141 Hz Gain -2.6 dB Q 0.80
  a_20 = 0.9980028304703323;
 8002ba4:	4b62      	ldr	r3, [pc, #392]	; (8002d30 <main+0x228>)
 8002ba6:	4a63      	ldr	r2, [pc, #396]	; (8002d34 <main+0x22c>)
 8002ba8:	601a      	str	r2, [r3, #0]
  a_21 = -1.984474840194307;
 8002baa:	4b63      	ldr	r3, [pc, #396]	; (8002d38 <main+0x230>)
 8002bac:	4a63      	ldr	r2, [pc, #396]	; (8002d3c <main+0x234>)
 8002bae:	601a      	str	r2, [r3, #0]
  a_22 = 0.9865565155222485;
 8002bb0:	4b63      	ldr	r3, [pc, #396]	; (8002d40 <main+0x238>)
 8002bb2:	4a64      	ldr	r2, [pc, #400]	; (8002d44 <main+0x23c>)
 8002bb4:	601a      	str	r2, [r3, #0]
  b_21 = -1.984474840194307;
 8002bb6:	4b64      	ldr	r3, [pc, #400]	; (8002d48 <main+0x240>)
 8002bb8:	4a60      	ldr	r2, [pc, #384]	; (8002d3c <main+0x234>)
 8002bba:	601a      	str	r2, [r3, #0]
  b_22 = 0.9845593459925809;
 8002bbc:	4b63      	ldr	r3, [pc, #396]	; (8002d4c <main+0x244>)
 8002bbe:	4a64      	ldr	r2, [pc, #400]	; (8002d50 <main+0x248>)
 8002bc0:	601a      	str	r2, [r3, #0]

  // HD600 Filter 4: ON PK Fc 514 Hz Gain 0.9 dB Q 1.17
  a_30 = 1.00154702875083;
 8002bc2:	4b64      	ldr	r3, [pc, #400]	; (8002d54 <main+0x24c>)
 8002bc4:	4a64      	ldr	r2, [pc, #400]	; (8002d58 <main+0x250>)
 8002bc6:	601a      	str	r2, [r3, #0]
  a_31 = -1.970544014273223;
 8002bc8:	4b64      	ldr	r3, [pc, #400]	; (8002d5c <main+0x254>)
 8002bca:	4a65      	ldr	r2, [pc, #404]	; (8002d60 <main+0x258>)
 8002bcc:	601a      	str	r2, [r3, #0]
  a_32 = 0.9701125752134796;
 8002bce:	4b65      	ldr	r3, [pc, #404]	; (8002d64 <main+0x25c>)
 8002bd0:	4a65      	ldr	r2, [pc, #404]	; (8002d68 <main+0x260>)
 8002bd2:	601a      	str	r2, [r3, #0]
  b_31 = -1.970544014273223;
 8002bd4:	4b65      	ldr	r3, [pc, #404]	; (8002d6c <main+0x264>)
 8002bd6:	4a62      	ldr	r2, [pc, #392]	; (8002d60 <main+0x258>)
 8002bd8:	601a      	str	r2, [r3, #0]
  b_32 = 0.9716596039643095;
 8002bda:	4b65      	ldr	r3, [pc, #404]	; (8002d70 <main+0x268>)
 8002bdc:	4a65      	ldr	r2, [pc, #404]	; (8002d74 <main+0x26c>)
 8002bde:	601a      	str	r2, [r3, #0]

  // HD600 Filter 5: ON PK Fc 3018 Hz Gain -1.8 dB Q 2.45
  a_40 = 0.9912107719290015;
 8002be0:	4b65      	ldr	r3, [pc, #404]	; (8002d78 <main+0x270>)
 8002be2:	4a66      	ldr	r2, [pc, #408]	; (8002d7c <main+0x274>)
 8002be4:	601a      	str	r2, [r3, #0]
  a_41 = -1.8690184542025916;
 8002be6:	4b66      	ldr	r3, [pc, #408]	; (8002d80 <main+0x278>)
 8002be8:	4a66      	ldr	r2, [pc, #408]	; (8002d84 <main+0x27c>)
 8002bea:	601a      	str	r2, [r3, #0]
  a_42 = 0.9148719089560465;
 8002bec:	4b66      	ldr	r3, [pc, #408]	; (8002d88 <main+0x280>)
 8002bee:	4a67      	ldr	r2, [pc, #412]	; (8002d8c <main+0x284>)
 8002bf0:	601a      	str	r2, [r3, #0]
  b_41 = -1.8690184542025916;
 8002bf2:	4b67      	ldr	r3, [pc, #412]	; (8002d90 <main+0x288>)
 8002bf4:	4a63      	ldr	r2, [pc, #396]	; (8002d84 <main+0x27c>)
 8002bf6:	601a      	str	r2, [r3, #0]
  b_42 = 0.906082680885048;
 8002bf8:	4b66      	ldr	r3, [pc, #408]	; (8002d94 <main+0x28c>)
 8002bfa:	4a67      	ldr	r2, [pc, #412]	; (8002d98 <main+0x290>)
 8002bfc:	601a      	str	r2, [r3, #0]

  // HD600 Filter 6: ON HSC Fc 10000 Hz Gain -1.5 dB Q 0.70
  a_50 = 0.8731333757133074;
 8002bfe:	4b67      	ldr	r3, [pc, #412]	; (8002d9c <main+0x294>)
 8002c00:	4a67      	ldr	r2, [pc, #412]	; (8002da0 <main+0x298>)
 8002c02:	601a      	str	r2, [r3, #0]
  a_51 = -0.9685046801373233;
 8002c04:	4b67      	ldr	r3, [pc, #412]	; (8002da4 <main+0x29c>)
 8002c06:	4a68      	ldr	r2, [pc, #416]	; (8002da8 <main+0x2a0>)
 8002c08:	601a      	str	r2, [r3, #0]
  a_52 = 0.34764005643962353;
 8002c0a:	4b68      	ldr	r3, [pc, #416]	; (8002dac <main+0x2a4>)
 8002c0c:	4a68      	ldr	r2, [pc, #416]	; (8002db0 <main+0x2a8>)
 8002c0e:	601a      	str	r2, [r3, #0]
  b_51 = -1.1748465804602355;
 8002c10:	4b68      	ldr	r3, [pc, #416]	; (8002db4 <main+0x2ac>)
 8002c12:	4a69      	ldr	r2, [pc, #420]	; (8002db8 <main+0x2b0>)
 8002c14:	601a      	str	r2, [r3, #0]
  b_52 = 0.42711533247584305;
 8002c16:	4b69      	ldr	r3, [pc, #420]	; (8002dbc <main+0x2b4>)
 8002c18:	4a69      	ldr	r2, [pc, #420]	; (8002dc0 <main+0x2b8>)
 8002c1a:	601a      	str	r2, [r3, #0]

  // HD600 Filter 7: ON PK Fc 5584 Hz Gain -2.7 dB Q 4.65
  a_60 = 0.9866875200318461;
 8002c1c:	4b69      	ldr	r3, [pc, #420]	; (8002dc4 <main+0x2bc>)
 8002c1e:	4a6a      	ldr	r2, [pc, #424]	; (8002dc8 <main+0x2c0>)
 8002c20:	601a      	str	r2, [r3, #0]
  a_61 = -1.7748385254998431;
 8002c22:	4b6a      	ldr	r3, [pc, #424]	; (8002dcc <main+0x2c4>)
 8002c24:	4a6a      	ldr	r2, [pc, #424]	; (8002dd0 <main+0x2c8>)
 8002c26:	601a      	str	r2, [r3, #0]
  a_62 = 0.9136590190830277;
 8002c28:	4b6a      	ldr	r3, [pc, #424]	; (8002dd4 <main+0x2cc>)
 8002c2a:	4a6b      	ldr	r2, [pc, #428]	; (8002dd8 <main+0x2d0>)
 8002c2c:	601a      	str	r2, [r3, #0]
  b_61 = -1.7748385254998431;
 8002c2e:	4b6b      	ldr	r3, [pc, #428]	; (8002ddc <main+0x2d4>)
 8002c30:	4a67      	ldr	r2, [pc, #412]	; (8002dd0 <main+0x2c8>)
 8002c32:	601a      	str	r2, [r3, #0]
  b_62 = 0.9003465391148741;
 8002c34:	4b6a      	ldr	r3, [pc, #424]	; (8002de0 <main+0x2d8>)
 8002c36:	4a6b      	ldr	r2, [pc, #428]	; (8002de4 <main+0x2dc>)
 8002c38:	601a      	str	r2, [r3, #0]

  // HD600 Filter 8: ON PK Fc 1402 Hz Gain -0.8 dB Q 2.52
  a_70 = 0.9982802189680681;
 8002c3a:	4b6b      	ldr	r3, [pc, #428]	; (8002de8 <main+0x2e0>)
 8002c3c:	4a6b      	ldr	r2, [pc, #428]	; (8002dec <main+0x2e4>)
 8002c3e:	601a      	str	r2, [r3, #0]
  a_71 = -1.9526595925529386;
 8002c40:	4b6b      	ldr	r3, [pc, #428]	; (8002df0 <main+0x2e8>)
 8002c42:	4a6c      	ldr	r2, [pc, #432]	; (8002df4 <main+0x2ec>)
 8002c44:	601a      	str	r2, [r3, #0]
  a_72 = 0.9626290335047876;
 8002c46:	4b6c      	ldr	r3, [pc, #432]	; (8002df8 <main+0x2f0>)
 8002c48:	4a6c      	ldr	r2, [pc, #432]	; (8002dfc <main+0x2f4>)
 8002c4a:	601a      	str	r2, [r3, #0]
  b_71 = -1.9526595925529386;
 8002c4c:	4b6c      	ldr	r3, [pc, #432]	; (8002e00 <main+0x2f8>)
 8002c4e:	4a69      	ldr	r2, [pc, #420]	; (8002df4 <main+0x2ec>)
 8002c50:	601a      	str	r2, [r3, #0]
  b_72 = 0.9609092524728559;
 8002c52:	4b6c      	ldr	r3, [pc, #432]	; (8002e04 <main+0x2fc>)
 8002c54:	4a6c      	ldr	r2, [pc, #432]	; (8002e08 <main+0x300>)
 8002c56:	601a      	str	r2, [r3, #0]

  // HD600 Filter 9: ON PK Fc 4419 Hz Gain 2.2 dB Q 6.00
  a_80 = 1.006691862827416;
 8002c58:	4b6c      	ldr	r3, [pc, #432]	; (8002e0c <main+0x304>)
 8002c5a:	4a6d      	ldr	r2, [pc, #436]	; (8002e10 <main+0x308>)
 8002c5c:	601a      	str	r2, [r3, #0]
  a_81 =-1.8724290527416163;
 8002c5e:	4b6d      	ldr	r3, [pc, #436]	; (8002e14 <main+0x30c>)
 8002c60:	4a6d      	ldr	r2, [pc, #436]	; (8002e18 <main+0x310>)
 8002c62:	601a      	str	r2, [r3, #0]
  a_82 = 0.9468770999820032;
 8002c64:	4b6d      	ldr	r3, [pc, #436]	; (8002e1c <main+0x314>)
 8002c66:	4a6e      	ldr	r2, [pc, #440]	; (8002e20 <main+0x318>)
 8002c68:	601a      	str	r2, [r3, #0]
  b_81 = -1.8724290527416163;
 8002c6a:	4b6e      	ldr	r3, [pc, #440]	; (8002e24 <main+0x31c>)
 8002c6c:	4a6a      	ldr	r2, [pc, #424]	; (8002e18 <main+0x310>)
 8002c6e:	601a      	str	r2, [r3, #0]
  b_82 = 0.9535689628094193;
 8002c70:	4b6d      	ldr	r3, [pc, #436]	; (8002e28 <main+0x320>)
 8002c72:	4a6e      	ldr	r2, [pc, #440]	; (8002e2c <main+0x324>)
 8002c74:	601a      	str	r2, [r3, #0]

  // HD600 Filter 10: ON PK Fc 7643 Hz Gain 1.6 dB Q 5.27
  a_90 = 1.008803573425046;
 8002c76:	4b6e      	ldr	r3, [pc, #440]	; (8002e30 <main+0x328>)
 8002c78:	4a6e      	ldr	r2, [pc, #440]	; (8002e34 <main+0x32c>)
 8002c7a:	601a      	str	r2, [r3, #0]
  a_91 = -1.6785575418757952;
 8002c7c:	4b6e      	ldr	r3, [pc, #440]	; (8002e38 <main+0x330>)
 8002c7e:	4a6f      	ldr	r2, [pc, #444]	; (8002e3c <main+0x334>)
 8002c80:	601a      	str	r2, [r3, #0]
  a_92 = 0.9041462890488169;
 8002c82:	4b6f      	ldr	r3, [pc, #444]	; (8002e40 <main+0x338>)
 8002c84:	4a6f      	ldr	r2, [pc, #444]	; (8002e44 <main+0x33c>)
 8002c86:	601a      	str	r2, [r3, #0]
  b_91 = -1.6785575418757952;
 8002c88:	4b6f      	ldr	r3, [pc, #444]	; (8002e48 <main+0x340>)
 8002c8a:	4a6c      	ldr	r2, [pc, #432]	; (8002e3c <main+0x334>)
 8002c8c:	601a      	str	r2, [r3, #0]
  b_92 = 0.9129498624738628;
 8002c8e:	4b6f      	ldr	r3, [pc, #444]	; (8002e4c <main+0x344>)
 8002c90:	4a6f      	ldr	r2, [pc, #444]	; (8002e50 <main+0x348>)
 8002c92:	601a      	str	r2, [r3, #0]

  while (1)
 8002c94:	e7fe      	b.n	8002c94 <main+0x18c>
 8002c96:	bf00      	nop
 8002c98:	20000234 	.word	0x20000234
 8002c9c:	20000244 	.word	0x20000244
 8002ca0:	2000002c 	.word	0x2000002c
 8002ca4:	20000134 	.word	0x20000134
 8002ca8:	3f745001 	.word	0x3f745001
 8002cac:	20000138 	.word	0x20000138
 8002cb0:	bff45001 	.word	0xbff45001
 8002cb4:	2000013c 	.word	0x2000013c
 8002cb8:	20000140 	.word	0x20000140
 8002cbc:	bff40cfa 	.word	0xbff40cfa
 8002cc0:	20000144 	.word	0x20000144
 8002cc4:	3f692610 	.word	0x3f692610
 8002cc8:	20000158 	.word	0x20000158
 8002ccc:	3a860e16 	.word	0x3a860e16
 8002cd0:	2000015c 	.word	0x2000015c
 8002cd4:	3b060e16 	.word	0x3b060e16
 8002cd8:	20000160 	.word	0x20000160
 8002cdc:	20000164 	.word	0x20000164
 8002ce0:	20000168 	.word	0x20000168
 8002ce4:	2000016c 	.word	0x2000016c
 8002ce8:	3f804701 	.word	0x3f804701
 8002cec:	20000170 	.word	0x20000170
 8002cf0:	bffec0b3 	.word	0xbffec0b3
 8002cf4:	20000174 	.word	0x20000174
 8002cf8:	3f7cf9d2 	.word	0x3f7cf9d2
 8002cfc:	20000178 	.word	0x20000178
 8002d00:	bffec189 	.word	0xbffec189
 8002d04:	2000017c 	.word	0x2000017c
 8002d08:	3f7d8627 	.word	0x3f7d8627
 8002d0c:	20000180 	.word	0x20000180
 8002d10:	3f8914ca 	.word	0x3f8914ca
 8002d14:	20000184 	.word	0x20000184
 8002d18:	bfbc889a 	.word	0xbfbc889a
 8002d1c:	20000188 	.word	0x20000188
 8002d20:	3f3521e0 	.word	0x3f3521e0
 8002d24:	2000018c 	.word	0x2000018c
 8002d28:	20000190 	.word	0x20000190
 8002d2c:	3f474b73 	.word	0x3f474b73
 8002d30:	20000194 	.word	0x20000194
 8002d34:	3f7f7d1d 	.word	0x3f7f7d1d
 8002d38:	20000198 	.word	0x20000198
 8002d3c:	bffe0346 	.word	0xbffe0346
 8002d40:	2000019c 	.word	0x2000019c
 8002d44:	3f7c8ef8 	.word	0x3f7c8ef8
 8002d48:	200001a0 	.word	0x200001a0
 8002d4c:	200001a4 	.word	0x200001a4
 8002d50:	3f7c0c15 	.word	0x3f7c0c15
 8002d54:	200001a8 	.word	0x200001a8
 8002d58:	3f8032b1 	.word	0x3f8032b1
 8002d5c:	200001ac 	.word	0x200001ac
 8002d60:	bffc3ac9 	.word	0xbffc3ac9
 8002d64:	200001b0 	.word	0x200001b0
 8002d68:	3f78594c 	.word	0x3f78594c
 8002d6c:	200001b4 	.word	0x200001b4
 8002d70:	200001b8 	.word	0x200001b8
 8002d74:	3f78beaf 	.word	0x3f78beaf
 8002d78:	200001bc 	.word	0x200001bc
 8002d7c:	3f7dbffd 	.word	0x3f7dbffd
 8002d80:	200001c0 	.word	0x200001c0
 8002d84:	bfef3bff 	.word	0xbfef3bff
 8002d88:	200001c4 	.word	0x200001c4
 8002d8c:	3f6a350c 	.word	0x3f6a350c
 8002d90:	200001c8 	.word	0x200001c8
 8002d94:	200001cc 	.word	0x200001cc
 8002d98:	3f67f509 	.word	0x3f67f509
 8002d9c:	200001d0 	.word	0x200001d0
 8002da0:	3f5f85ab 	.word	0x3f5f85ab
 8002da4:	200001d4 	.word	0x200001d4
 8002da8:	bf77efec 	.word	0xbf77efec
 8002dac:	200001d8 	.word	0x200001d8
 8002db0:	3eb1fde1 	.word	0x3eb1fde1
 8002db4:	200001dc 	.word	0x200001dc
 8002db8:	bf96615f 	.word	0xbf96615f
 8002dbc:	200001e0 	.word	0x200001e0
 8002dc0:	3edaaedc 	.word	0x3edaaedc
 8002dc4:	200001e4 	.word	0x200001e4
 8002dc8:	3f7c978e 	.word	0x3f7c978e
 8002dcc:	200001e8 	.word	0x200001e8
 8002dd0:	bfe32de9 	.word	0xbfe32de9
 8002dd4:	200001ec 	.word	0x200001ec
 8002dd8:	3f69e58f 	.word	0x3f69e58f
 8002ddc:	200001f0 	.word	0x200001f0
 8002de0:	200001f4 	.word	0x200001f4
 8002de4:	3f667d1c 	.word	0x3f667d1c
 8002de8:	200001f8 	.word	0x200001f8
 8002dec:	3f7f8f4b 	.word	0x3f7f8f4b
 8002df0:	200001fc 	.word	0x200001fc
 8002df4:	bff9f0c0 	.word	0xbff9f0c0
 8002df8:	20000200 	.word	0x20000200
 8002dfc:	3f766edb 	.word	0x3f766edb
 8002e00:	20000204 	.word	0x20000204
 8002e04:	20000208 	.word	0x20000208
 8002e08:	3f75fe26 	.word	0x3f75fe26
 8002e0c:	2000020c 	.word	0x2000020c
 8002e10:	3f80db47 	.word	0x3f80db47
 8002e14:	20000210 	.word	0x20000210
 8002e18:	bfefabc1 	.word	0xbfefabc1
 8002e1c:	20000214 	.word	0x20000214
 8002e20:	3f72668a 	.word	0x3f72668a
 8002e24:	20000218 	.word	0x20000218
 8002e28:	2000021c 	.word	0x2000021c
 8002e2c:	3f741d18 	.word	0x3f741d18
 8002e30:	20000220 	.word	0x20000220
 8002e34:	3f81207a 	.word	0x3f81207a
 8002e38:	20000224 	.word	0x20000224
 8002e3c:	bfd6daf9 	.word	0xbfd6daf9
 8002e40:	20000228 	.word	0x20000228
 8002e44:	3f677622 	.word	0x3f677622
 8002e48:	2000022c 	.word	0x2000022c
 8002e4c:	20000230 	.word	0x20000230
 8002e50:	3f69b715 	.word	0x3f69b715

08002e54 <Calc_IIR>:

  }

}

int Calc_IIR(int inSample, float a0, float a1, float a2, float b1, float b2) {
 8002e54:	b480      	push	{r7}
 8002e56:	b089      	sub	sp, #36	; 0x24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6178      	str	r0, [r7, #20]
 8002e5c:	ed87 0a04 	vstr	s0, [r7, #16]
 8002e60:	edc7 0a03 	vstr	s1, [r7, #12]
 8002e64:	ed87 1a02 	vstr	s2, [r7, #8]
 8002e68:	edc7 1a01 	vstr	s3, [r7, #4]
 8002e6c:	ed87 2a00 	vstr	s4, [r7]
	float inSampleF = (float)inSample;
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	ee07 3a90 	vmov	s15, r3
 8002e76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e7a:	edc7 7a07 	vstr	s15, [r7, #28]
	float outSampleF =
			a0 * inSampleF
 8002e7e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e82:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e86:	ee27 7a27 	vmul.f32	s14, s14, s15
			+a1 * lin_z1
 8002e8a:	4b20      	ldr	r3, [pc, #128]	; (8002f0c <Calc_IIR+0xb8>)
 8002e8c:	edd3 6a00 	vldr	s13, [r3]
 8002e90:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e98:	ee37 7a27 	vadd.f32	s14, s14, s15
			+a2 * lin_z2
 8002e9c:	4b1c      	ldr	r3, [pc, #112]	; (8002f10 <Calc_IIR+0xbc>)
 8002e9e:	edd3 6a00 	vldr	s13, [r3]
 8002ea2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ea6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002eaa:	ee37 7a27 	vadd.f32	s14, s14, s15
			-b1 * lout_z1
 8002eae:	4b19      	ldr	r3, [pc, #100]	; (8002f14 <Calc_IIR+0xc0>)
 8002eb0:	edd3 6a00 	vldr	s13, [r3]
 8002eb4:	edd7 7a01 	vldr	s15, [r7, #4]
 8002eb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ebc:	ee37 7a67 	vsub.f32	s14, s14, s15
			-b2 * lout_z2;
 8002ec0:	4b15      	ldr	r3, [pc, #84]	; (8002f18 <Calc_IIR+0xc4>)
 8002ec2:	edd3 6a00 	vldr	s13, [r3]
 8002ec6:	edd7 7a00 	vldr	s15, [r7]
 8002eca:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float outSampleF =
 8002ece:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ed2:	edc7 7a06 	vstr	s15, [r7, #24]
	lin_z2 = lin_z1;
 8002ed6:	4b0d      	ldr	r3, [pc, #52]	; (8002f0c <Calc_IIR+0xb8>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a0d      	ldr	r2, [pc, #52]	; (8002f10 <Calc_IIR+0xbc>)
 8002edc:	6013      	str	r3, [r2, #0]
	lin_z1 = inSampleF;
 8002ede:	4a0b      	ldr	r2, [pc, #44]	; (8002f0c <Calc_IIR+0xb8>)
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	6013      	str	r3, [r2, #0]
	lout_z2 = lout_z1;
 8002ee4:	4b0b      	ldr	r3, [pc, #44]	; (8002f14 <Calc_IIR+0xc0>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a0b      	ldr	r2, [pc, #44]	; (8002f18 <Calc_IIR+0xc4>)
 8002eea:	6013      	str	r3, [r2, #0]
	lout_z1 = outSampleF;
 8002eec:	4a09      	ldr	r2, [pc, #36]	; (8002f14 <Calc_IIR+0xc0>)
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	6013      	str	r3, [r2, #0]

	return (int) outSampleF;
 8002ef2:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ef6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002efa:	ee17 3a90 	vmov	r3, s15
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3724      	adds	r7, #36	; 0x24
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	20000148 	.word	0x20000148
 8002f10:	2000014c 	.word	0x2000014c
 8002f14:	20000150 	.word	0x20000150
 8002f18:	20000154 	.word	0x20000154

08002f1c <HAL_I2SEx_TxRxHalfCpltCallback>:
	rout_z1 = outSampleF;

	return (int) outSampleF;
}

void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]

	//restore signed 24 bit sample from 16-bit buffers
	int lSample = (int) (rxBuf[0]<<16)|rxBuf[1];
 8002f24:	4ba9      	ldr	r3, [pc, #676]	; (80031cc <HAL_I2SEx_TxRxHalfCpltCallback+0x2b0>)
 8002f26:	881b      	ldrh	r3, [r3, #0]
 8002f28:	041b      	lsls	r3, r3, #16
 8002f2a:	4aa8      	ldr	r2, [pc, #672]	; (80031cc <HAL_I2SEx_TxRxHalfCpltCallback+0x2b0>)
 8002f2c:	8852      	ldrh	r2, [r2, #2]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	60fb      	str	r3, [r7, #12]
	int rSample = (int) (rxBuf[2]<<16)|rxBuf[3];
 8002f32:	4ba6      	ldr	r3, [pc, #664]	; (80031cc <HAL_I2SEx_TxRxHalfCpltCallback+0x2b0>)
 8002f34:	889b      	ldrh	r3, [r3, #4]
 8002f36:	041b      	lsls	r3, r3, #16
 8002f38:	4aa4      	ldr	r2, [pc, #656]	; (80031cc <HAL_I2SEx_TxRxHalfCpltCallback+0x2b0>)
 8002f3a:	88d2      	ldrh	r2, [r2, #6]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	60bb      	str	r3, [r7, #8]

	// divide by 2 (rightshift) -> -6dB per sample
	lSample = lSample>>1;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	105b      	asrs	r3, r3, #1
 8002f44:	60fb      	str	r3, [r7, #12]
	rSample = rSample>>1;
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	105b      	asrs	r3, r3, #1
 8002f4a:	60bb      	str	r3, [r7, #8]

	//sum to mono
	lSample = rSample + lSample;
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	4413      	add	r3, r2
 8002f52:	60fb      	str	r3, [r7, #12]
	rSample = lSample;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	60bb      	str	r3, [r7, #8]
	//lSample = Calc_IIR_Left(lSample);
    //rSample = Calc_IIR_Right(rSample);

	// recursive calls??

	lSample = Calc_IIR(lSample, a_00, a_01, a_02, b_01,b_02);
 8002f58:	4b9d      	ldr	r3, [pc, #628]	; (80031d0 <HAL_I2SEx_TxRxHalfCpltCallback+0x2b4>)
 8002f5a:	edd3 7a00 	vldr	s15, [r3]
 8002f5e:	4b9d      	ldr	r3, [pc, #628]	; (80031d4 <HAL_I2SEx_TxRxHalfCpltCallback+0x2b8>)
 8002f60:	ed93 7a00 	vldr	s14, [r3]
 8002f64:	4b9c      	ldr	r3, [pc, #624]	; (80031d8 <HAL_I2SEx_TxRxHalfCpltCallback+0x2bc>)
 8002f66:	edd3 6a00 	vldr	s13, [r3]
 8002f6a:	4b9c      	ldr	r3, [pc, #624]	; (80031dc <HAL_I2SEx_TxRxHalfCpltCallback+0x2c0>)
 8002f6c:	ed93 6a00 	vldr	s12, [r3]
 8002f70:	4b9b      	ldr	r3, [pc, #620]	; (80031e0 <HAL_I2SEx_TxRxHalfCpltCallback+0x2c4>)
 8002f72:	edd3 5a00 	vldr	s11, [r3]
 8002f76:	eeb0 2a65 	vmov.f32	s4, s11
 8002f7a:	eef0 1a46 	vmov.f32	s3, s12
 8002f7e:	eeb0 1a66 	vmov.f32	s2, s13
 8002f82:	eef0 0a47 	vmov.f32	s1, s14
 8002f86:	eeb0 0a67 	vmov.f32	s0, s15
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f7ff ff62 	bl	8002e54 <Calc_IIR>
 8002f90:	60f8      	str	r0, [r7, #12]
	lSample = Calc_IIR(lSample, a_10, a_11, a_12, b_11,b_12);
 8002f92:	4b94      	ldr	r3, [pc, #592]	; (80031e4 <HAL_I2SEx_TxRxHalfCpltCallback+0x2c8>)
 8002f94:	edd3 7a00 	vldr	s15, [r3]
 8002f98:	4b93      	ldr	r3, [pc, #588]	; (80031e8 <HAL_I2SEx_TxRxHalfCpltCallback+0x2cc>)
 8002f9a:	ed93 7a00 	vldr	s14, [r3]
 8002f9e:	4b93      	ldr	r3, [pc, #588]	; (80031ec <HAL_I2SEx_TxRxHalfCpltCallback+0x2d0>)
 8002fa0:	edd3 6a00 	vldr	s13, [r3]
 8002fa4:	4b92      	ldr	r3, [pc, #584]	; (80031f0 <HAL_I2SEx_TxRxHalfCpltCallback+0x2d4>)
 8002fa6:	ed93 6a00 	vldr	s12, [r3]
 8002faa:	4b92      	ldr	r3, [pc, #584]	; (80031f4 <HAL_I2SEx_TxRxHalfCpltCallback+0x2d8>)
 8002fac:	edd3 5a00 	vldr	s11, [r3]
 8002fb0:	eeb0 2a65 	vmov.f32	s4, s11
 8002fb4:	eef0 1a46 	vmov.f32	s3, s12
 8002fb8:	eeb0 1a66 	vmov.f32	s2, s13
 8002fbc:	eef0 0a47 	vmov.f32	s1, s14
 8002fc0:	eeb0 0a67 	vmov.f32	s0, s15
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f7ff ff45 	bl	8002e54 <Calc_IIR>
 8002fca:	60f8      	str	r0, [r7, #12]
	lSample = Calc_IIR(lSample, a_20, a_21, a_22, b_21,b_22);
 8002fcc:	4b8a      	ldr	r3, [pc, #552]	; (80031f8 <HAL_I2SEx_TxRxHalfCpltCallback+0x2dc>)
 8002fce:	edd3 7a00 	vldr	s15, [r3]
 8002fd2:	4b8a      	ldr	r3, [pc, #552]	; (80031fc <HAL_I2SEx_TxRxHalfCpltCallback+0x2e0>)
 8002fd4:	ed93 7a00 	vldr	s14, [r3]
 8002fd8:	4b89      	ldr	r3, [pc, #548]	; (8003200 <HAL_I2SEx_TxRxHalfCpltCallback+0x2e4>)
 8002fda:	edd3 6a00 	vldr	s13, [r3]
 8002fde:	4b89      	ldr	r3, [pc, #548]	; (8003204 <HAL_I2SEx_TxRxHalfCpltCallback+0x2e8>)
 8002fe0:	ed93 6a00 	vldr	s12, [r3]
 8002fe4:	4b88      	ldr	r3, [pc, #544]	; (8003208 <HAL_I2SEx_TxRxHalfCpltCallback+0x2ec>)
 8002fe6:	edd3 5a00 	vldr	s11, [r3]
 8002fea:	eeb0 2a65 	vmov.f32	s4, s11
 8002fee:	eef0 1a46 	vmov.f32	s3, s12
 8002ff2:	eeb0 1a66 	vmov.f32	s2, s13
 8002ff6:	eef0 0a47 	vmov.f32	s1, s14
 8002ffa:	eeb0 0a67 	vmov.f32	s0, s15
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f7ff ff28 	bl	8002e54 <Calc_IIR>
 8003004:	60f8      	str	r0, [r7, #12]
	lSample = Calc_IIR(lSample, a_30, a_31, a_32, b_31,b_32);
 8003006:	4b81      	ldr	r3, [pc, #516]	; (800320c <HAL_I2SEx_TxRxHalfCpltCallback+0x2f0>)
 8003008:	edd3 7a00 	vldr	s15, [r3]
 800300c:	4b80      	ldr	r3, [pc, #512]	; (8003210 <HAL_I2SEx_TxRxHalfCpltCallback+0x2f4>)
 800300e:	ed93 7a00 	vldr	s14, [r3]
 8003012:	4b80      	ldr	r3, [pc, #512]	; (8003214 <HAL_I2SEx_TxRxHalfCpltCallback+0x2f8>)
 8003014:	edd3 6a00 	vldr	s13, [r3]
 8003018:	4b7f      	ldr	r3, [pc, #508]	; (8003218 <HAL_I2SEx_TxRxHalfCpltCallback+0x2fc>)
 800301a:	ed93 6a00 	vldr	s12, [r3]
 800301e:	4b7f      	ldr	r3, [pc, #508]	; (800321c <HAL_I2SEx_TxRxHalfCpltCallback+0x300>)
 8003020:	edd3 5a00 	vldr	s11, [r3]
 8003024:	eeb0 2a65 	vmov.f32	s4, s11
 8003028:	eef0 1a46 	vmov.f32	s3, s12
 800302c:	eeb0 1a66 	vmov.f32	s2, s13
 8003030:	eef0 0a47 	vmov.f32	s1, s14
 8003034:	eeb0 0a67 	vmov.f32	s0, s15
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f7ff ff0b 	bl	8002e54 <Calc_IIR>
 800303e:	60f8      	str	r0, [r7, #12]
	lSample = Calc_IIR(lSample, a_40, a_41, a_42, b_41,b_42);
 8003040:	4b77      	ldr	r3, [pc, #476]	; (8003220 <HAL_I2SEx_TxRxHalfCpltCallback+0x304>)
 8003042:	edd3 7a00 	vldr	s15, [r3]
 8003046:	4b77      	ldr	r3, [pc, #476]	; (8003224 <HAL_I2SEx_TxRxHalfCpltCallback+0x308>)
 8003048:	ed93 7a00 	vldr	s14, [r3]
 800304c:	4b76      	ldr	r3, [pc, #472]	; (8003228 <HAL_I2SEx_TxRxHalfCpltCallback+0x30c>)
 800304e:	edd3 6a00 	vldr	s13, [r3]
 8003052:	4b76      	ldr	r3, [pc, #472]	; (800322c <HAL_I2SEx_TxRxHalfCpltCallback+0x310>)
 8003054:	ed93 6a00 	vldr	s12, [r3]
 8003058:	4b75      	ldr	r3, [pc, #468]	; (8003230 <HAL_I2SEx_TxRxHalfCpltCallback+0x314>)
 800305a:	edd3 5a00 	vldr	s11, [r3]
 800305e:	eeb0 2a65 	vmov.f32	s4, s11
 8003062:	eef0 1a46 	vmov.f32	s3, s12
 8003066:	eeb0 1a66 	vmov.f32	s2, s13
 800306a:	eef0 0a47 	vmov.f32	s1, s14
 800306e:	eeb0 0a67 	vmov.f32	s0, s15
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f7ff feee 	bl	8002e54 <Calc_IIR>
 8003078:	60f8      	str	r0, [r7, #12]
	lSample = Calc_IIR(lSample, a_50, a_51, a_52, b_51,b_52);
 800307a:	4b6e      	ldr	r3, [pc, #440]	; (8003234 <HAL_I2SEx_TxRxHalfCpltCallback+0x318>)
 800307c:	edd3 7a00 	vldr	s15, [r3]
 8003080:	4b6d      	ldr	r3, [pc, #436]	; (8003238 <HAL_I2SEx_TxRxHalfCpltCallback+0x31c>)
 8003082:	ed93 7a00 	vldr	s14, [r3]
 8003086:	4b6d      	ldr	r3, [pc, #436]	; (800323c <HAL_I2SEx_TxRxHalfCpltCallback+0x320>)
 8003088:	edd3 6a00 	vldr	s13, [r3]
 800308c:	4b6c      	ldr	r3, [pc, #432]	; (8003240 <HAL_I2SEx_TxRxHalfCpltCallback+0x324>)
 800308e:	ed93 6a00 	vldr	s12, [r3]
 8003092:	4b6c      	ldr	r3, [pc, #432]	; (8003244 <HAL_I2SEx_TxRxHalfCpltCallback+0x328>)
 8003094:	edd3 5a00 	vldr	s11, [r3]
 8003098:	eeb0 2a65 	vmov.f32	s4, s11
 800309c:	eef0 1a46 	vmov.f32	s3, s12
 80030a0:	eeb0 1a66 	vmov.f32	s2, s13
 80030a4:	eef0 0a47 	vmov.f32	s1, s14
 80030a8:	eeb0 0a67 	vmov.f32	s0, s15
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f7ff fed1 	bl	8002e54 <Calc_IIR>
 80030b2:	60f8      	str	r0, [r7, #12]
	lSample = Calc_IIR(lSample, a_60, a_61, a_62, b_61,b_62);
 80030b4:	4b64      	ldr	r3, [pc, #400]	; (8003248 <HAL_I2SEx_TxRxHalfCpltCallback+0x32c>)
 80030b6:	edd3 7a00 	vldr	s15, [r3]
 80030ba:	4b64      	ldr	r3, [pc, #400]	; (800324c <HAL_I2SEx_TxRxHalfCpltCallback+0x330>)
 80030bc:	ed93 7a00 	vldr	s14, [r3]
 80030c0:	4b63      	ldr	r3, [pc, #396]	; (8003250 <HAL_I2SEx_TxRxHalfCpltCallback+0x334>)
 80030c2:	edd3 6a00 	vldr	s13, [r3]
 80030c6:	4b63      	ldr	r3, [pc, #396]	; (8003254 <HAL_I2SEx_TxRxHalfCpltCallback+0x338>)
 80030c8:	ed93 6a00 	vldr	s12, [r3]
 80030cc:	4b62      	ldr	r3, [pc, #392]	; (8003258 <HAL_I2SEx_TxRxHalfCpltCallback+0x33c>)
 80030ce:	edd3 5a00 	vldr	s11, [r3]
 80030d2:	eeb0 2a65 	vmov.f32	s4, s11
 80030d6:	eef0 1a46 	vmov.f32	s3, s12
 80030da:	eeb0 1a66 	vmov.f32	s2, s13
 80030de:	eef0 0a47 	vmov.f32	s1, s14
 80030e2:	eeb0 0a67 	vmov.f32	s0, s15
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f7ff feb4 	bl	8002e54 <Calc_IIR>
 80030ec:	60f8      	str	r0, [r7, #12]
	lSample = Calc_IIR(lSample, a_70, a_71, a_72, b_71,b_72);
 80030ee:	4b5b      	ldr	r3, [pc, #364]	; (800325c <HAL_I2SEx_TxRxHalfCpltCallback+0x340>)
 80030f0:	edd3 7a00 	vldr	s15, [r3]
 80030f4:	4b5a      	ldr	r3, [pc, #360]	; (8003260 <HAL_I2SEx_TxRxHalfCpltCallback+0x344>)
 80030f6:	ed93 7a00 	vldr	s14, [r3]
 80030fa:	4b5a      	ldr	r3, [pc, #360]	; (8003264 <HAL_I2SEx_TxRxHalfCpltCallback+0x348>)
 80030fc:	edd3 6a00 	vldr	s13, [r3]
 8003100:	4b59      	ldr	r3, [pc, #356]	; (8003268 <HAL_I2SEx_TxRxHalfCpltCallback+0x34c>)
 8003102:	ed93 6a00 	vldr	s12, [r3]
 8003106:	4b59      	ldr	r3, [pc, #356]	; (800326c <HAL_I2SEx_TxRxHalfCpltCallback+0x350>)
 8003108:	edd3 5a00 	vldr	s11, [r3]
 800310c:	eeb0 2a65 	vmov.f32	s4, s11
 8003110:	eef0 1a46 	vmov.f32	s3, s12
 8003114:	eeb0 1a66 	vmov.f32	s2, s13
 8003118:	eef0 0a47 	vmov.f32	s1, s14
 800311c:	eeb0 0a67 	vmov.f32	s0, s15
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f7ff fe97 	bl	8002e54 <Calc_IIR>
 8003126:	60f8      	str	r0, [r7, #12]
	lSample = Calc_IIR(lSample, a_80, a_81, a_82, b_81,b_82);
 8003128:	4b51      	ldr	r3, [pc, #324]	; (8003270 <HAL_I2SEx_TxRxHalfCpltCallback+0x354>)
 800312a:	edd3 7a00 	vldr	s15, [r3]
 800312e:	4b51      	ldr	r3, [pc, #324]	; (8003274 <HAL_I2SEx_TxRxHalfCpltCallback+0x358>)
 8003130:	ed93 7a00 	vldr	s14, [r3]
 8003134:	4b50      	ldr	r3, [pc, #320]	; (8003278 <HAL_I2SEx_TxRxHalfCpltCallback+0x35c>)
 8003136:	edd3 6a00 	vldr	s13, [r3]
 800313a:	4b50      	ldr	r3, [pc, #320]	; (800327c <HAL_I2SEx_TxRxHalfCpltCallback+0x360>)
 800313c:	ed93 6a00 	vldr	s12, [r3]
 8003140:	4b4f      	ldr	r3, [pc, #316]	; (8003280 <HAL_I2SEx_TxRxHalfCpltCallback+0x364>)
 8003142:	edd3 5a00 	vldr	s11, [r3]
 8003146:	eeb0 2a65 	vmov.f32	s4, s11
 800314a:	eef0 1a46 	vmov.f32	s3, s12
 800314e:	eeb0 1a66 	vmov.f32	s2, s13
 8003152:	eef0 0a47 	vmov.f32	s1, s14
 8003156:	eeb0 0a67 	vmov.f32	s0, s15
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f7ff fe7a 	bl	8002e54 <Calc_IIR>
 8003160:	60f8      	str	r0, [r7, #12]
	lSample = Calc_IIR(lSample, a_90, a_91, a_92, b_91,b_92);
 8003162:	4b48      	ldr	r3, [pc, #288]	; (8003284 <HAL_I2SEx_TxRxHalfCpltCallback+0x368>)
 8003164:	edd3 7a00 	vldr	s15, [r3]
 8003168:	4b47      	ldr	r3, [pc, #284]	; (8003288 <HAL_I2SEx_TxRxHalfCpltCallback+0x36c>)
 800316a:	ed93 7a00 	vldr	s14, [r3]
 800316e:	4b47      	ldr	r3, [pc, #284]	; (800328c <HAL_I2SEx_TxRxHalfCpltCallback+0x370>)
 8003170:	edd3 6a00 	vldr	s13, [r3]
 8003174:	4b46      	ldr	r3, [pc, #280]	; (8003290 <HAL_I2SEx_TxRxHalfCpltCallback+0x374>)
 8003176:	ed93 6a00 	vldr	s12, [r3]
 800317a:	4b46      	ldr	r3, [pc, #280]	; (8003294 <HAL_I2SEx_TxRxHalfCpltCallback+0x378>)
 800317c:	edd3 5a00 	vldr	s11, [r3]
 8003180:	eeb0 2a65 	vmov.f32	s4, s11
 8003184:	eef0 1a46 	vmov.f32	s3, s12
 8003188:	eeb0 1a66 	vmov.f32	s2, s13
 800318c:	eef0 0a47 	vmov.f32	s1, s14
 8003190:	eeb0 0a67 	vmov.f32	s0, s15
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f7ff fe5d 	bl	8002e54 <Calc_IIR>
 800319a:	60f8      	str	r0, [r7, #12]

	rSample = lSample;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	60bb      	str	r3, [r7, #8]


	//restore to buffer
	txBuf[0] = (lSample>>16)&0xFFFF;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	0c1b      	lsrs	r3, r3, #16
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	4b3c      	ldr	r3, [pc, #240]	; (8003298 <HAL_I2SEx_TxRxHalfCpltCallback+0x37c>)
 80031a8:	801a      	strh	r2, [r3, #0]
	txBuf[1] = lSample&0xFFFF;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	4b3a      	ldr	r3, [pc, #232]	; (8003298 <HAL_I2SEx_TxRxHalfCpltCallback+0x37c>)
 80031b0:	805a      	strh	r2, [r3, #2]
	txBuf[2] = (rSample>>16)&0xFFFF;
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	0c1b      	lsrs	r3, r3, #16
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	4b37      	ldr	r3, [pc, #220]	; (8003298 <HAL_I2SEx_TxRxHalfCpltCallback+0x37c>)
 80031ba:	809a      	strh	r2, [r3, #4]
	txBuf[3] = rSample&0xFFFF;
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	b29a      	uxth	r2, r3
 80031c0:	4b35      	ldr	r3, [pc, #212]	; (8003298 <HAL_I2SEx_TxRxHalfCpltCallback+0x37c>)
 80031c2:	80da      	strh	r2, [r3, #6]
}
 80031c4:	bf00      	nop
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	20000234 	.word	0x20000234
 80031d0:	2000016c 	.word	0x2000016c
 80031d4:	20000170 	.word	0x20000170
 80031d8:	20000174 	.word	0x20000174
 80031dc:	20000178 	.word	0x20000178
 80031e0:	2000017c 	.word	0x2000017c
 80031e4:	20000180 	.word	0x20000180
 80031e8:	20000184 	.word	0x20000184
 80031ec:	20000188 	.word	0x20000188
 80031f0:	2000018c 	.word	0x2000018c
 80031f4:	20000190 	.word	0x20000190
 80031f8:	20000194 	.word	0x20000194
 80031fc:	20000198 	.word	0x20000198
 8003200:	2000019c 	.word	0x2000019c
 8003204:	200001a0 	.word	0x200001a0
 8003208:	200001a4 	.word	0x200001a4
 800320c:	200001a8 	.word	0x200001a8
 8003210:	200001ac 	.word	0x200001ac
 8003214:	200001b0 	.word	0x200001b0
 8003218:	200001b4 	.word	0x200001b4
 800321c:	200001b8 	.word	0x200001b8
 8003220:	200001bc 	.word	0x200001bc
 8003224:	200001c0 	.word	0x200001c0
 8003228:	200001c4 	.word	0x200001c4
 800322c:	200001c8 	.word	0x200001c8
 8003230:	200001cc 	.word	0x200001cc
 8003234:	200001d0 	.word	0x200001d0
 8003238:	200001d4 	.word	0x200001d4
 800323c:	200001d8 	.word	0x200001d8
 8003240:	200001dc 	.word	0x200001dc
 8003244:	200001e0 	.word	0x200001e0
 8003248:	200001e4 	.word	0x200001e4
 800324c:	200001e8 	.word	0x200001e8
 8003250:	200001ec 	.word	0x200001ec
 8003254:	200001f0 	.word	0x200001f0
 8003258:	200001f4 	.word	0x200001f4
 800325c:	200001f8 	.word	0x200001f8
 8003260:	200001fc 	.word	0x200001fc
 8003264:	20000200 	.word	0x20000200
 8003268:	20000204 	.word	0x20000204
 800326c:	20000208 	.word	0x20000208
 8003270:	2000020c 	.word	0x2000020c
 8003274:	20000210 	.word	0x20000210
 8003278:	20000214 	.word	0x20000214
 800327c:	20000218 	.word	0x20000218
 8003280:	2000021c 	.word	0x2000021c
 8003284:	20000220 	.word	0x20000220
 8003288:	20000224 	.word	0x20000224
 800328c:	20000228 	.word	0x20000228
 8003290:	2000022c 	.word	0x2000022c
 8003294:	20000230 	.word	0x20000230
 8003298:	20000244 	.word	0x20000244

0800329c <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s){
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]

	//restore signed 24 bit sample from 16-bit buffers
	int lSample = (int) (rxBuf[4]<<16)|rxBuf[5];
 80032a4:	4ba9      	ldr	r3, [pc, #676]	; (800354c <HAL_I2SEx_TxRxCpltCallback+0x2b0>)
 80032a6:	891b      	ldrh	r3, [r3, #8]
 80032a8:	041b      	lsls	r3, r3, #16
 80032aa:	4aa8      	ldr	r2, [pc, #672]	; (800354c <HAL_I2SEx_TxRxCpltCallback+0x2b0>)
 80032ac:	8952      	ldrh	r2, [r2, #10]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	60fb      	str	r3, [r7, #12]
	int rSample = (int) (rxBuf[6]<<16)|rxBuf[7];
 80032b2:	4ba6      	ldr	r3, [pc, #664]	; (800354c <HAL_I2SEx_TxRxCpltCallback+0x2b0>)
 80032b4:	899b      	ldrh	r3, [r3, #12]
 80032b6:	041b      	lsls	r3, r3, #16
 80032b8:	4aa4      	ldr	r2, [pc, #656]	; (800354c <HAL_I2SEx_TxRxCpltCallback+0x2b0>)
 80032ba:	89d2      	ldrh	r2, [r2, #14]
 80032bc:	4313      	orrs	r3, r2
 80032be:	60bb      	str	r3, [r7, #8]

	// divide by 2 (rightshift) -> -6sdB per sample
	lSample = lSample>>1;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	105b      	asrs	r3, r3, #1
 80032c4:	60fb      	str	r3, [r7, #12]
	rSample = rSample>>1;
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	105b      	asrs	r3, r3, #1
 80032ca:	60bb      	str	r3, [r7, #8]

	//sum to mono
	lSample = rSample + lSample;
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	4413      	add	r3, r2
 80032d2:	60fb      	str	r3, [r7, #12]
	rSample = lSample;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	60bb      	str	r3, [r7, #8]
	//lSample = Calc_IIR_Left(lSample);
	//rSample = Calc_IIR_Right(rSample);

	// recursive calls??

	lSample = Calc_IIR(lSample, a_00, a_01, a_02, b_01,b_02);
 80032d8:	4b9d      	ldr	r3, [pc, #628]	; (8003550 <HAL_I2SEx_TxRxCpltCallback+0x2b4>)
 80032da:	edd3 7a00 	vldr	s15, [r3]
 80032de:	4b9d      	ldr	r3, [pc, #628]	; (8003554 <HAL_I2SEx_TxRxCpltCallback+0x2b8>)
 80032e0:	ed93 7a00 	vldr	s14, [r3]
 80032e4:	4b9c      	ldr	r3, [pc, #624]	; (8003558 <HAL_I2SEx_TxRxCpltCallback+0x2bc>)
 80032e6:	edd3 6a00 	vldr	s13, [r3]
 80032ea:	4b9c      	ldr	r3, [pc, #624]	; (800355c <HAL_I2SEx_TxRxCpltCallback+0x2c0>)
 80032ec:	ed93 6a00 	vldr	s12, [r3]
 80032f0:	4b9b      	ldr	r3, [pc, #620]	; (8003560 <HAL_I2SEx_TxRxCpltCallback+0x2c4>)
 80032f2:	edd3 5a00 	vldr	s11, [r3]
 80032f6:	eeb0 2a65 	vmov.f32	s4, s11
 80032fa:	eef0 1a46 	vmov.f32	s3, s12
 80032fe:	eeb0 1a66 	vmov.f32	s2, s13
 8003302:	eef0 0a47 	vmov.f32	s1, s14
 8003306:	eeb0 0a67 	vmov.f32	s0, s15
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f7ff fda2 	bl	8002e54 <Calc_IIR>
 8003310:	60f8      	str	r0, [r7, #12]
	lSample = Calc_IIR(lSample, a_10, a_11, a_12, b_11,b_12);
 8003312:	4b94      	ldr	r3, [pc, #592]	; (8003564 <HAL_I2SEx_TxRxCpltCallback+0x2c8>)
 8003314:	edd3 7a00 	vldr	s15, [r3]
 8003318:	4b93      	ldr	r3, [pc, #588]	; (8003568 <HAL_I2SEx_TxRxCpltCallback+0x2cc>)
 800331a:	ed93 7a00 	vldr	s14, [r3]
 800331e:	4b93      	ldr	r3, [pc, #588]	; (800356c <HAL_I2SEx_TxRxCpltCallback+0x2d0>)
 8003320:	edd3 6a00 	vldr	s13, [r3]
 8003324:	4b92      	ldr	r3, [pc, #584]	; (8003570 <HAL_I2SEx_TxRxCpltCallback+0x2d4>)
 8003326:	ed93 6a00 	vldr	s12, [r3]
 800332a:	4b92      	ldr	r3, [pc, #584]	; (8003574 <HAL_I2SEx_TxRxCpltCallback+0x2d8>)
 800332c:	edd3 5a00 	vldr	s11, [r3]
 8003330:	eeb0 2a65 	vmov.f32	s4, s11
 8003334:	eef0 1a46 	vmov.f32	s3, s12
 8003338:	eeb0 1a66 	vmov.f32	s2, s13
 800333c:	eef0 0a47 	vmov.f32	s1, s14
 8003340:	eeb0 0a67 	vmov.f32	s0, s15
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f7ff fd85 	bl	8002e54 <Calc_IIR>
 800334a:	60f8      	str	r0, [r7, #12]
	lSample = Calc_IIR(lSample, a_20, a_21, a_22, b_21,b_22);
 800334c:	4b8a      	ldr	r3, [pc, #552]	; (8003578 <HAL_I2SEx_TxRxCpltCallback+0x2dc>)
 800334e:	edd3 7a00 	vldr	s15, [r3]
 8003352:	4b8a      	ldr	r3, [pc, #552]	; (800357c <HAL_I2SEx_TxRxCpltCallback+0x2e0>)
 8003354:	ed93 7a00 	vldr	s14, [r3]
 8003358:	4b89      	ldr	r3, [pc, #548]	; (8003580 <HAL_I2SEx_TxRxCpltCallback+0x2e4>)
 800335a:	edd3 6a00 	vldr	s13, [r3]
 800335e:	4b89      	ldr	r3, [pc, #548]	; (8003584 <HAL_I2SEx_TxRxCpltCallback+0x2e8>)
 8003360:	ed93 6a00 	vldr	s12, [r3]
 8003364:	4b88      	ldr	r3, [pc, #544]	; (8003588 <HAL_I2SEx_TxRxCpltCallback+0x2ec>)
 8003366:	edd3 5a00 	vldr	s11, [r3]
 800336a:	eeb0 2a65 	vmov.f32	s4, s11
 800336e:	eef0 1a46 	vmov.f32	s3, s12
 8003372:	eeb0 1a66 	vmov.f32	s2, s13
 8003376:	eef0 0a47 	vmov.f32	s1, s14
 800337a:	eeb0 0a67 	vmov.f32	s0, s15
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f7ff fd68 	bl	8002e54 <Calc_IIR>
 8003384:	60f8      	str	r0, [r7, #12]
	lSample = Calc_IIR(lSample, a_30, a_31, a_32, b_31,b_32);
 8003386:	4b81      	ldr	r3, [pc, #516]	; (800358c <HAL_I2SEx_TxRxCpltCallback+0x2f0>)
 8003388:	edd3 7a00 	vldr	s15, [r3]
 800338c:	4b80      	ldr	r3, [pc, #512]	; (8003590 <HAL_I2SEx_TxRxCpltCallback+0x2f4>)
 800338e:	ed93 7a00 	vldr	s14, [r3]
 8003392:	4b80      	ldr	r3, [pc, #512]	; (8003594 <HAL_I2SEx_TxRxCpltCallback+0x2f8>)
 8003394:	edd3 6a00 	vldr	s13, [r3]
 8003398:	4b7f      	ldr	r3, [pc, #508]	; (8003598 <HAL_I2SEx_TxRxCpltCallback+0x2fc>)
 800339a:	ed93 6a00 	vldr	s12, [r3]
 800339e:	4b7f      	ldr	r3, [pc, #508]	; (800359c <HAL_I2SEx_TxRxCpltCallback+0x300>)
 80033a0:	edd3 5a00 	vldr	s11, [r3]
 80033a4:	eeb0 2a65 	vmov.f32	s4, s11
 80033a8:	eef0 1a46 	vmov.f32	s3, s12
 80033ac:	eeb0 1a66 	vmov.f32	s2, s13
 80033b0:	eef0 0a47 	vmov.f32	s1, s14
 80033b4:	eeb0 0a67 	vmov.f32	s0, s15
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f7ff fd4b 	bl	8002e54 <Calc_IIR>
 80033be:	60f8      	str	r0, [r7, #12]
	lSample = Calc_IIR(lSample, a_40, a_41, a_42, b_41,b_42);
 80033c0:	4b77      	ldr	r3, [pc, #476]	; (80035a0 <HAL_I2SEx_TxRxCpltCallback+0x304>)
 80033c2:	edd3 7a00 	vldr	s15, [r3]
 80033c6:	4b77      	ldr	r3, [pc, #476]	; (80035a4 <HAL_I2SEx_TxRxCpltCallback+0x308>)
 80033c8:	ed93 7a00 	vldr	s14, [r3]
 80033cc:	4b76      	ldr	r3, [pc, #472]	; (80035a8 <HAL_I2SEx_TxRxCpltCallback+0x30c>)
 80033ce:	edd3 6a00 	vldr	s13, [r3]
 80033d2:	4b76      	ldr	r3, [pc, #472]	; (80035ac <HAL_I2SEx_TxRxCpltCallback+0x310>)
 80033d4:	ed93 6a00 	vldr	s12, [r3]
 80033d8:	4b75      	ldr	r3, [pc, #468]	; (80035b0 <HAL_I2SEx_TxRxCpltCallback+0x314>)
 80033da:	edd3 5a00 	vldr	s11, [r3]
 80033de:	eeb0 2a65 	vmov.f32	s4, s11
 80033e2:	eef0 1a46 	vmov.f32	s3, s12
 80033e6:	eeb0 1a66 	vmov.f32	s2, s13
 80033ea:	eef0 0a47 	vmov.f32	s1, s14
 80033ee:	eeb0 0a67 	vmov.f32	s0, s15
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f7ff fd2e 	bl	8002e54 <Calc_IIR>
 80033f8:	60f8      	str	r0, [r7, #12]
	lSample = Calc_IIR(lSample, a_50, a_51, a_52, b_51,b_52);
 80033fa:	4b6e      	ldr	r3, [pc, #440]	; (80035b4 <HAL_I2SEx_TxRxCpltCallback+0x318>)
 80033fc:	edd3 7a00 	vldr	s15, [r3]
 8003400:	4b6d      	ldr	r3, [pc, #436]	; (80035b8 <HAL_I2SEx_TxRxCpltCallback+0x31c>)
 8003402:	ed93 7a00 	vldr	s14, [r3]
 8003406:	4b6d      	ldr	r3, [pc, #436]	; (80035bc <HAL_I2SEx_TxRxCpltCallback+0x320>)
 8003408:	edd3 6a00 	vldr	s13, [r3]
 800340c:	4b6c      	ldr	r3, [pc, #432]	; (80035c0 <HAL_I2SEx_TxRxCpltCallback+0x324>)
 800340e:	ed93 6a00 	vldr	s12, [r3]
 8003412:	4b6c      	ldr	r3, [pc, #432]	; (80035c4 <HAL_I2SEx_TxRxCpltCallback+0x328>)
 8003414:	edd3 5a00 	vldr	s11, [r3]
 8003418:	eeb0 2a65 	vmov.f32	s4, s11
 800341c:	eef0 1a46 	vmov.f32	s3, s12
 8003420:	eeb0 1a66 	vmov.f32	s2, s13
 8003424:	eef0 0a47 	vmov.f32	s1, s14
 8003428:	eeb0 0a67 	vmov.f32	s0, s15
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f7ff fd11 	bl	8002e54 <Calc_IIR>
 8003432:	60f8      	str	r0, [r7, #12]
	lSample = Calc_IIR(lSample, a_60, a_61, a_62, b_61,b_62);
 8003434:	4b64      	ldr	r3, [pc, #400]	; (80035c8 <HAL_I2SEx_TxRxCpltCallback+0x32c>)
 8003436:	edd3 7a00 	vldr	s15, [r3]
 800343a:	4b64      	ldr	r3, [pc, #400]	; (80035cc <HAL_I2SEx_TxRxCpltCallback+0x330>)
 800343c:	ed93 7a00 	vldr	s14, [r3]
 8003440:	4b63      	ldr	r3, [pc, #396]	; (80035d0 <HAL_I2SEx_TxRxCpltCallback+0x334>)
 8003442:	edd3 6a00 	vldr	s13, [r3]
 8003446:	4b63      	ldr	r3, [pc, #396]	; (80035d4 <HAL_I2SEx_TxRxCpltCallback+0x338>)
 8003448:	ed93 6a00 	vldr	s12, [r3]
 800344c:	4b62      	ldr	r3, [pc, #392]	; (80035d8 <HAL_I2SEx_TxRxCpltCallback+0x33c>)
 800344e:	edd3 5a00 	vldr	s11, [r3]
 8003452:	eeb0 2a65 	vmov.f32	s4, s11
 8003456:	eef0 1a46 	vmov.f32	s3, s12
 800345a:	eeb0 1a66 	vmov.f32	s2, s13
 800345e:	eef0 0a47 	vmov.f32	s1, s14
 8003462:	eeb0 0a67 	vmov.f32	s0, s15
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f7ff fcf4 	bl	8002e54 <Calc_IIR>
 800346c:	60f8      	str	r0, [r7, #12]
	lSample = Calc_IIR(lSample, a_70, a_71, a_72, b_71,b_72);
 800346e:	4b5b      	ldr	r3, [pc, #364]	; (80035dc <HAL_I2SEx_TxRxCpltCallback+0x340>)
 8003470:	edd3 7a00 	vldr	s15, [r3]
 8003474:	4b5a      	ldr	r3, [pc, #360]	; (80035e0 <HAL_I2SEx_TxRxCpltCallback+0x344>)
 8003476:	ed93 7a00 	vldr	s14, [r3]
 800347a:	4b5a      	ldr	r3, [pc, #360]	; (80035e4 <HAL_I2SEx_TxRxCpltCallback+0x348>)
 800347c:	edd3 6a00 	vldr	s13, [r3]
 8003480:	4b59      	ldr	r3, [pc, #356]	; (80035e8 <HAL_I2SEx_TxRxCpltCallback+0x34c>)
 8003482:	ed93 6a00 	vldr	s12, [r3]
 8003486:	4b59      	ldr	r3, [pc, #356]	; (80035ec <HAL_I2SEx_TxRxCpltCallback+0x350>)
 8003488:	edd3 5a00 	vldr	s11, [r3]
 800348c:	eeb0 2a65 	vmov.f32	s4, s11
 8003490:	eef0 1a46 	vmov.f32	s3, s12
 8003494:	eeb0 1a66 	vmov.f32	s2, s13
 8003498:	eef0 0a47 	vmov.f32	s1, s14
 800349c:	eeb0 0a67 	vmov.f32	s0, s15
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f7ff fcd7 	bl	8002e54 <Calc_IIR>
 80034a6:	60f8      	str	r0, [r7, #12]
	lSample = Calc_IIR(lSample, a_80, a_81, a_82, b_81,b_82);
 80034a8:	4b51      	ldr	r3, [pc, #324]	; (80035f0 <HAL_I2SEx_TxRxCpltCallback+0x354>)
 80034aa:	edd3 7a00 	vldr	s15, [r3]
 80034ae:	4b51      	ldr	r3, [pc, #324]	; (80035f4 <HAL_I2SEx_TxRxCpltCallback+0x358>)
 80034b0:	ed93 7a00 	vldr	s14, [r3]
 80034b4:	4b50      	ldr	r3, [pc, #320]	; (80035f8 <HAL_I2SEx_TxRxCpltCallback+0x35c>)
 80034b6:	edd3 6a00 	vldr	s13, [r3]
 80034ba:	4b50      	ldr	r3, [pc, #320]	; (80035fc <HAL_I2SEx_TxRxCpltCallback+0x360>)
 80034bc:	ed93 6a00 	vldr	s12, [r3]
 80034c0:	4b4f      	ldr	r3, [pc, #316]	; (8003600 <HAL_I2SEx_TxRxCpltCallback+0x364>)
 80034c2:	edd3 5a00 	vldr	s11, [r3]
 80034c6:	eeb0 2a65 	vmov.f32	s4, s11
 80034ca:	eef0 1a46 	vmov.f32	s3, s12
 80034ce:	eeb0 1a66 	vmov.f32	s2, s13
 80034d2:	eef0 0a47 	vmov.f32	s1, s14
 80034d6:	eeb0 0a67 	vmov.f32	s0, s15
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f7ff fcba 	bl	8002e54 <Calc_IIR>
 80034e0:	60f8      	str	r0, [r7, #12]
	lSample = Calc_IIR(lSample, a_90, a_91, a_92, b_91,b_92);
 80034e2:	4b48      	ldr	r3, [pc, #288]	; (8003604 <HAL_I2SEx_TxRxCpltCallback+0x368>)
 80034e4:	edd3 7a00 	vldr	s15, [r3]
 80034e8:	4b47      	ldr	r3, [pc, #284]	; (8003608 <HAL_I2SEx_TxRxCpltCallback+0x36c>)
 80034ea:	ed93 7a00 	vldr	s14, [r3]
 80034ee:	4b47      	ldr	r3, [pc, #284]	; (800360c <HAL_I2SEx_TxRxCpltCallback+0x370>)
 80034f0:	edd3 6a00 	vldr	s13, [r3]
 80034f4:	4b46      	ldr	r3, [pc, #280]	; (8003610 <HAL_I2SEx_TxRxCpltCallback+0x374>)
 80034f6:	ed93 6a00 	vldr	s12, [r3]
 80034fa:	4b46      	ldr	r3, [pc, #280]	; (8003614 <HAL_I2SEx_TxRxCpltCallback+0x378>)
 80034fc:	edd3 5a00 	vldr	s11, [r3]
 8003500:	eeb0 2a65 	vmov.f32	s4, s11
 8003504:	eef0 1a46 	vmov.f32	s3, s12
 8003508:	eeb0 1a66 	vmov.f32	s2, s13
 800350c:	eef0 0a47 	vmov.f32	s1, s14
 8003510:	eeb0 0a67 	vmov.f32	s0, s15
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f7ff fc9d 	bl	8002e54 <Calc_IIR>
 800351a:	60f8      	str	r0, [r7, #12]

	rSample = lSample;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	60bb      	str	r3, [r7, #8]
	//restore to buffer
	txBuf[4] = (lSample>>16)&0xFFFF;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	0c1b      	lsrs	r3, r3, #16
 8003524:	b29a      	uxth	r2, r3
 8003526:	4b3c      	ldr	r3, [pc, #240]	; (8003618 <HAL_I2SEx_TxRxCpltCallback+0x37c>)
 8003528:	811a      	strh	r2, [r3, #8]
	txBuf[5] = lSample&0xFFFF;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	b29a      	uxth	r2, r3
 800352e:	4b3a      	ldr	r3, [pc, #232]	; (8003618 <HAL_I2SEx_TxRxCpltCallback+0x37c>)
 8003530:	815a      	strh	r2, [r3, #10]
	txBuf[6] = (rSample>>16)&0xFFFF;
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	0c1b      	lsrs	r3, r3, #16
 8003536:	b29a      	uxth	r2, r3
 8003538:	4b37      	ldr	r3, [pc, #220]	; (8003618 <HAL_I2SEx_TxRxCpltCallback+0x37c>)
 800353a:	819a      	strh	r2, [r3, #12]
	txBuf[7] = rSample&0xFFFF;
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	b29a      	uxth	r2, r3
 8003540:	4b35      	ldr	r3, [pc, #212]	; (8003618 <HAL_I2SEx_TxRxCpltCallback+0x37c>)
 8003542:	81da      	strh	r2, [r3, #14]
}
 8003544:	bf00      	nop
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	20000234 	.word	0x20000234
 8003550:	2000016c 	.word	0x2000016c
 8003554:	20000170 	.word	0x20000170
 8003558:	20000174 	.word	0x20000174
 800355c:	20000178 	.word	0x20000178
 8003560:	2000017c 	.word	0x2000017c
 8003564:	20000180 	.word	0x20000180
 8003568:	20000184 	.word	0x20000184
 800356c:	20000188 	.word	0x20000188
 8003570:	2000018c 	.word	0x2000018c
 8003574:	20000190 	.word	0x20000190
 8003578:	20000194 	.word	0x20000194
 800357c:	20000198 	.word	0x20000198
 8003580:	2000019c 	.word	0x2000019c
 8003584:	200001a0 	.word	0x200001a0
 8003588:	200001a4 	.word	0x200001a4
 800358c:	200001a8 	.word	0x200001a8
 8003590:	200001ac 	.word	0x200001ac
 8003594:	200001b0 	.word	0x200001b0
 8003598:	200001b4 	.word	0x200001b4
 800359c:	200001b8 	.word	0x200001b8
 80035a0:	200001bc 	.word	0x200001bc
 80035a4:	200001c0 	.word	0x200001c0
 80035a8:	200001c4 	.word	0x200001c4
 80035ac:	200001c8 	.word	0x200001c8
 80035b0:	200001cc 	.word	0x200001cc
 80035b4:	200001d0 	.word	0x200001d0
 80035b8:	200001d4 	.word	0x200001d4
 80035bc:	200001d8 	.word	0x200001d8
 80035c0:	200001dc 	.word	0x200001dc
 80035c4:	200001e0 	.word	0x200001e0
 80035c8:	200001e4 	.word	0x200001e4
 80035cc:	200001e8 	.word	0x200001e8
 80035d0:	200001ec 	.word	0x200001ec
 80035d4:	200001f0 	.word	0x200001f0
 80035d8:	200001f4 	.word	0x200001f4
 80035dc:	200001f8 	.word	0x200001f8
 80035e0:	200001fc 	.word	0x200001fc
 80035e4:	20000200 	.word	0x20000200
 80035e8:	20000204 	.word	0x20000204
 80035ec:	20000208 	.word	0x20000208
 80035f0:	2000020c 	.word	0x2000020c
 80035f4:	20000210 	.word	0x20000210
 80035f8:	20000214 	.word	0x20000214
 80035fc:	20000218 	.word	0x20000218
 8003600:	2000021c 	.word	0x2000021c
 8003604:	20000220 	.word	0x20000220
 8003608:	20000224 	.word	0x20000224
 800360c:	20000228 	.word	0x20000228
 8003610:	2000022c 	.word	0x2000022c
 8003614:	20000230 	.word	0x20000230
 8003618:	20000244 	.word	0x20000244

0800361c <SystemClock_Config>:


void SystemClock_Config(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b098      	sub	sp, #96	; 0x60
 8003620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003622:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003626:	2230      	movs	r2, #48	; 0x30
 8003628:	2100      	movs	r1, #0
 800362a:	4618      	mov	r0, r3
 800362c:	f000 fbc1 	bl	8003db2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003630:	f107 031c 	add.w	r3, r7, #28
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	605a      	str	r2, [r3, #4]
 800363a:	609a      	str	r2, [r3, #8]
 800363c:	60da      	str	r2, [r3, #12]
 800363e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003640:	f107 030c 	add.w	r3, r7, #12
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	605a      	str	r2, [r3, #4]
 800364a:	609a      	str	r2, [r3, #8]
 800364c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800364e:	2300      	movs	r3, #0
 8003650:	60bb      	str	r3, [r7, #8]
 8003652:	4b31      	ldr	r3, [pc, #196]	; (8003718 <SystemClock_Config+0xfc>)
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	4a30      	ldr	r2, [pc, #192]	; (8003718 <SystemClock_Config+0xfc>)
 8003658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800365c:	6413      	str	r3, [r2, #64]	; 0x40
 800365e:	4b2e      	ldr	r3, [pc, #184]	; (8003718 <SystemClock_Config+0xfc>)
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003666:	60bb      	str	r3, [r7, #8]
 8003668:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800366a:	2300      	movs	r3, #0
 800366c:	607b      	str	r3, [r7, #4]
 800366e:	4b2b      	ldr	r3, [pc, #172]	; (800371c <SystemClock_Config+0x100>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a2a      	ldr	r2, [pc, #168]	; (800371c <SystemClock_Config+0x100>)
 8003674:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003678:	6013      	str	r3, [r2, #0]
 800367a:	4b28      	ldr	r3, [pc, #160]	; (800371c <SystemClock_Config+0x100>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003682:	607b      	str	r3, [r7, #4]
 8003684:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003686:	2301      	movs	r3, #1
 8003688:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800368a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800368e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003690:	2302      	movs	r3, #2
 8003692:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003694:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003698:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800369a:	2308      	movs	r3, #8
 800369c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800369e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80036a2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80036a4:	2302      	movs	r3, #2
 80036a6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80036a8:	2307      	movs	r3, #7
 80036aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7fe fcc3 	bl	800203c <HAL_RCC_OscConfig>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d001      	beq.n	80036c0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80036bc:	f000 f9c4 	bl	8003a48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036c0:	230f      	movs	r3, #15
 80036c2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036c4:	2302      	movs	r3, #2
 80036c6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036c8:	2300      	movs	r3, #0
 80036ca:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80036cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80036d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80036d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036d6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80036d8:	f107 031c 	add.w	r3, r7, #28
 80036dc:	2105      	movs	r1, #5
 80036de:	4618      	mov	r0, r3
 80036e0:	f7fe feea 	bl	80024b8 <HAL_RCC_ClockConfig>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80036ea:	f000 f9ad 	bl	8003a48 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80036ee:	2301      	movs	r3, #1
 80036f0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80036f2:	23c0      	movs	r3, #192	; 0xc0
 80036f4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80036f6:	2302      	movs	r3, #2
 80036f8:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036fa:	f107 030c 	add.w	r3, r7, #12
 80036fe:	4618      	mov	r0, r3
 8003700:	f7ff f8c2 	bl	8002888 <HAL_RCCEx_PeriphCLKConfig>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800370a:	f000 f99d 	bl	8003a48 <Error_Handler>
  }
}
 800370e:	bf00      	nop
 8003710:	3760      	adds	r7, #96	; 0x60
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	40023800 	.word	0x40023800
 800371c:	40007000 	.word	0x40007000

08003720 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8003724:	4b13      	ldr	r3, [pc, #76]	; (8003774 <MX_I2S2_Init+0x54>)
 8003726:	4a14      	ldr	r2, [pc, #80]	; (8003778 <MX_I2S2_Init+0x58>)
 8003728:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800372a:	4b12      	ldr	r3, [pc, #72]	; (8003774 <MX_I2S2_Init+0x54>)
 800372c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003730:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8003732:	4b10      	ldr	r3, [pc, #64]	; (8003774 <MX_I2S2_Init+0x54>)
 8003734:	2200      	movs	r2, #0
 8003736:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8003738:	4b0e      	ldr	r3, [pc, #56]	; (8003774 <MX_I2S2_Init+0x54>)
 800373a:	2203      	movs	r2, #3
 800373c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800373e:	4b0d      	ldr	r3, [pc, #52]	; (8003774 <MX_I2S2_Init+0x54>)
 8003740:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003744:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8003746:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <MX_I2S2_Init+0x54>)
 8003748:	4a0c      	ldr	r2, [pc, #48]	; (800377c <MX_I2S2_Init+0x5c>)
 800374a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800374c:	4b09      	ldr	r3, [pc, #36]	; (8003774 <MX_I2S2_Init+0x54>)
 800374e:	2200      	movs	r2, #0
 8003750:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8003752:	4b08      	ldr	r3, [pc, #32]	; (8003774 <MX_I2S2_Init+0x54>)
 8003754:	2200      	movs	r2, #0
 8003756:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8003758:	4b06      	ldr	r3, [pc, #24]	; (8003774 <MX_I2S2_Init+0x54>)
 800375a:	2201      	movs	r2, #1
 800375c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800375e:	4805      	ldr	r0, [pc, #20]	; (8003774 <MX_I2S2_Init+0x54>)
 8003760:	f7fd fd62 	bl	8001228 <HAL_I2S_Init>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 800376a:	f000 f96d 	bl	8003a48 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800376e:	bf00      	nop
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	2000002c 	.word	0x2000002c
 8003778:	40003800 	.word	0x40003800
 800377c:	00017700 	.word	0x00017700

08003780 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003786:	2300      	movs	r3, #0
 8003788:	607b      	str	r3, [r7, #4]
 800378a:	4b10      	ldr	r3, [pc, #64]	; (80037cc <MX_DMA_Init+0x4c>)
 800378c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378e:	4a0f      	ldr	r2, [pc, #60]	; (80037cc <MX_DMA_Init+0x4c>)
 8003790:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003794:	6313      	str	r3, [r2, #48]	; 0x30
 8003796:	4b0d      	ldr	r3, [pc, #52]	; (80037cc <MX_DMA_Init+0x4c>)
 8003798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800379e:	607b      	str	r3, [r7, #4]
 80037a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80037a2:	2200      	movs	r2, #0
 80037a4:	2100      	movs	r1, #0
 80037a6:	200e      	movs	r0, #14
 80037a8:	f7fc ffd9 	bl	800075e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80037ac:	200e      	movs	r0, #14
 80037ae:	f7fc fff2 	bl	8000796 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80037b2:	2200      	movs	r2, #0
 80037b4:	2100      	movs	r1, #0
 80037b6:	200f      	movs	r0, #15
 80037b8:	f7fc ffd1 	bl	800075e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80037bc:	200f      	movs	r0, #15
 80037be:	f7fc ffea 	bl	8000796 <HAL_NVIC_EnableIRQ>

}
 80037c2:	bf00      	nop
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	40023800 	.word	0x40023800

080037d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b08c      	sub	sp, #48	; 0x30
 80037d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037d6:	f107 031c 	add.w	r3, r7, #28
 80037da:	2200      	movs	r2, #0
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	605a      	str	r2, [r3, #4]
 80037e0:	609a      	str	r2, [r3, #8]
 80037e2:	60da      	str	r2, [r3, #12]
 80037e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80037e6:	2300      	movs	r3, #0
 80037e8:	61bb      	str	r3, [r7, #24]
 80037ea:	4b90      	ldr	r3, [pc, #576]	; (8003a2c <MX_GPIO_Init+0x25c>)
 80037ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ee:	4a8f      	ldr	r2, [pc, #572]	; (8003a2c <MX_GPIO_Init+0x25c>)
 80037f0:	f043 0310 	orr.w	r3, r3, #16
 80037f4:	6313      	str	r3, [r2, #48]	; 0x30
 80037f6:	4b8d      	ldr	r3, [pc, #564]	; (8003a2c <MX_GPIO_Init+0x25c>)
 80037f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fa:	f003 0310 	and.w	r3, r3, #16
 80037fe:	61bb      	str	r3, [r7, #24]
 8003800:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003802:	2300      	movs	r3, #0
 8003804:	617b      	str	r3, [r7, #20]
 8003806:	4b89      	ldr	r3, [pc, #548]	; (8003a2c <MX_GPIO_Init+0x25c>)
 8003808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380a:	4a88      	ldr	r2, [pc, #544]	; (8003a2c <MX_GPIO_Init+0x25c>)
 800380c:	f043 0304 	orr.w	r3, r3, #4
 8003810:	6313      	str	r3, [r2, #48]	; 0x30
 8003812:	4b86      	ldr	r3, [pc, #536]	; (8003a2c <MX_GPIO_Init+0x25c>)
 8003814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003816:	f003 0304 	and.w	r3, r3, #4
 800381a:	617b      	str	r3, [r7, #20]
 800381c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800381e:	2300      	movs	r3, #0
 8003820:	613b      	str	r3, [r7, #16]
 8003822:	4b82      	ldr	r3, [pc, #520]	; (8003a2c <MX_GPIO_Init+0x25c>)
 8003824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003826:	4a81      	ldr	r2, [pc, #516]	; (8003a2c <MX_GPIO_Init+0x25c>)
 8003828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800382c:	6313      	str	r3, [r2, #48]	; 0x30
 800382e:	4b7f      	ldr	r3, [pc, #508]	; (8003a2c <MX_GPIO_Init+0x25c>)
 8003830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003836:	613b      	str	r3, [r7, #16]
 8003838:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800383a:	2300      	movs	r3, #0
 800383c:	60fb      	str	r3, [r7, #12]
 800383e:	4b7b      	ldr	r3, [pc, #492]	; (8003a2c <MX_GPIO_Init+0x25c>)
 8003840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003842:	4a7a      	ldr	r2, [pc, #488]	; (8003a2c <MX_GPIO_Init+0x25c>)
 8003844:	f043 0301 	orr.w	r3, r3, #1
 8003848:	6313      	str	r3, [r2, #48]	; 0x30
 800384a:	4b78      	ldr	r3, [pc, #480]	; (8003a2c <MX_GPIO_Init+0x25c>)
 800384c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	60fb      	str	r3, [r7, #12]
 8003854:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003856:	2300      	movs	r3, #0
 8003858:	60bb      	str	r3, [r7, #8]
 800385a:	4b74      	ldr	r3, [pc, #464]	; (8003a2c <MX_GPIO_Init+0x25c>)
 800385c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385e:	4a73      	ldr	r2, [pc, #460]	; (8003a2c <MX_GPIO_Init+0x25c>)
 8003860:	f043 0302 	orr.w	r3, r3, #2
 8003864:	6313      	str	r3, [r2, #48]	; 0x30
 8003866:	4b71      	ldr	r3, [pc, #452]	; (8003a2c <MX_GPIO_Init+0x25c>)
 8003868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	60bb      	str	r3, [r7, #8]
 8003870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003872:	2300      	movs	r3, #0
 8003874:	607b      	str	r3, [r7, #4]
 8003876:	4b6d      	ldr	r3, [pc, #436]	; (8003a2c <MX_GPIO_Init+0x25c>)
 8003878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387a:	4a6c      	ldr	r2, [pc, #432]	; (8003a2c <MX_GPIO_Init+0x25c>)
 800387c:	f043 0308 	orr.w	r3, r3, #8
 8003880:	6313      	str	r3, [r2, #48]	; 0x30
 8003882:	4b6a      	ldr	r3, [pc, #424]	; (8003a2c <MX_GPIO_Init+0x25c>)
 8003884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003886:	f003 0308 	and.w	r3, r3, #8
 800388a:	607b      	str	r3, [r7, #4]
 800388c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800388e:	2200      	movs	r2, #0
 8003890:	2108      	movs	r1, #8
 8003892:	4867      	ldr	r0, [pc, #412]	; (8003a30 <MX_GPIO_Init+0x260>)
 8003894:	f7fd fcae 	bl	80011f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8003898:	2200      	movs	r2, #0
 800389a:	2101      	movs	r1, #1
 800389c:	4865      	ldr	r0, [pc, #404]	; (8003a34 <MX_GPIO_Init+0x264>)
 800389e:	f7fd fca9 	bl	80011f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 80038a2:	2200      	movs	r2, #0
 80038a4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80038a8:	4863      	ldr	r0, [pc, #396]	; (8003a38 <MX_GPIO_Init+0x268>)
 80038aa:	f7fd fca3 	bl	80011f4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80038ae:	2308      	movs	r3, #8
 80038b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038b2:	2301      	movs	r3, #1
 80038b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b6:	2300      	movs	r3, #0
 80038b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ba:	2300      	movs	r3, #0
 80038bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80038be:	f107 031c 	add.w	r3, r7, #28
 80038c2:	4619      	mov	r1, r3
 80038c4:	485a      	ldr	r0, [pc, #360]	; (8003a30 <MX_GPIO_Init+0x260>)
 80038c6:	f7fd faf9 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80038ca:	2301      	movs	r3, #1
 80038cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038ce:	2301      	movs	r3, #1
 80038d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d2:	2300      	movs	r3, #0
 80038d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038d6:	2300      	movs	r3, #0
 80038d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038da:	f107 031c 	add.w	r3, r7, #28
 80038de:	4619      	mov	r1, r3
 80038e0:	4854      	ldr	r0, [pc, #336]	; (8003a34 <MX_GPIO_Init+0x264>)
 80038e2:	f7fd faeb 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80038e6:	2301      	movs	r3, #1
 80038e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80038ea:	4b54      	ldr	r3, [pc, #336]	; (8003a3c <MX_GPIO_Init+0x26c>)
 80038ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ee:	2300      	movs	r3, #0
 80038f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038f2:	f107 031c 	add.w	r3, r7, #28
 80038f6:	4619      	mov	r1, r3
 80038f8:	4851      	ldr	r0, [pc, #324]	; (8003a40 <MX_GPIO_Init+0x270>)
 80038fa:	f7fd fadf 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80038fe:	2310      	movs	r3, #16
 8003900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003902:	2302      	movs	r3, #2
 8003904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003906:	2300      	movs	r3, #0
 8003908:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800390a:	2300      	movs	r3, #0
 800390c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800390e:	2306      	movs	r3, #6
 8003910:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003912:	f107 031c 	add.w	r3, r7, #28
 8003916:	4619      	mov	r1, r3
 8003918:	4849      	ldr	r0, [pc, #292]	; (8003a40 <MX_GPIO_Init+0x270>)
 800391a:	f7fd facf 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800391e:	23e0      	movs	r3, #224	; 0xe0
 8003920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003922:	2302      	movs	r3, #2
 8003924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003926:	2300      	movs	r3, #0
 8003928:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800392a:	2303      	movs	r3, #3
 800392c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800392e:	2305      	movs	r3, #5
 8003930:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003932:	f107 031c 	add.w	r3, r7, #28
 8003936:	4619      	mov	r1, r3
 8003938:	4841      	ldr	r0, [pc, #260]	; (8003a40 <MX_GPIO_Init+0x270>)
 800393a:	f7fd fabf 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800393e:	2304      	movs	r3, #4
 8003940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003942:	2300      	movs	r3, #0
 8003944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003946:	2300      	movs	r3, #0
 8003948:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800394a:	f107 031c 	add.w	r3, r7, #28
 800394e:	4619      	mov	r1, r3
 8003950:	483c      	ldr	r0, [pc, #240]	; (8003a44 <MX_GPIO_Init+0x274>)
 8003952:	f7fd fab3 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 8003956:	f24f 0310 	movw	r3, #61456	; 0xf010
 800395a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800395c:	2301      	movs	r3, #1
 800395e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003960:	2300      	movs	r3, #0
 8003962:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003964:	2300      	movs	r3, #0
 8003966:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003968:	f107 031c 	add.w	r3, r7, #28
 800396c:	4619      	mov	r1, r3
 800396e:	4832      	ldr	r0, [pc, #200]	; (8003a38 <MX_GPIO_Init+0x268>)
 8003970:	f7fd faa4 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8003974:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8003978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800397a:	2302      	movs	r3, #2
 800397c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800397e:	2300      	movs	r3, #0
 8003980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003982:	2300      	movs	r3, #0
 8003984:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003986:	2306      	movs	r3, #6
 8003988:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800398a:	f107 031c 	add.w	r3, r7, #28
 800398e:	4619      	mov	r1, r3
 8003990:	4828      	ldr	r0, [pc, #160]	; (8003a34 <MX_GPIO_Init+0x264>)
 8003992:	f7fd fa93 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003996:	f44f 7300 	mov.w	r3, #512	; 0x200
 800399a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800399c:	2300      	movs	r3, #0
 800399e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a0:	2300      	movs	r3, #0
 80039a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039a4:	f107 031c 	add.w	r3, r7, #28
 80039a8:	4619      	mov	r1, r3
 80039aa:	4825      	ldr	r0, [pc, #148]	; (8003a40 <MX_GPIO_Init+0x270>)
 80039ac:	f7fd fa86 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80039b0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80039b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b6:	2302      	movs	r3, #2
 80039b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ba:	2300      	movs	r3, #0
 80039bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039be:	2303      	movs	r3, #3
 80039c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80039c2:	230a      	movs	r3, #10
 80039c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039c6:	f107 031c 	add.w	r3, r7, #28
 80039ca:	4619      	mov	r1, r3
 80039cc:	481c      	ldr	r0, [pc, #112]	; (8003a40 <MX_GPIO_Init+0x270>)
 80039ce:	f7fd fa75 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80039d2:	2320      	movs	r3, #32
 80039d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039d6:	2300      	movs	r3, #0
 80039d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039da:	2300      	movs	r3, #0
 80039dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039de:	f107 031c 	add.w	r3, r7, #28
 80039e2:	4619      	mov	r1, r3
 80039e4:	4814      	ldr	r0, [pc, #80]	; (8003a38 <MX_GPIO_Init+0x268>)
 80039e6:	f7fd fa69 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80039ea:	f44f 7310 	mov.w	r3, #576	; 0x240
 80039ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039f0:	2312      	movs	r3, #18
 80039f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039f4:	2301      	movs	r3, #1
 80039f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039f8:	2303      	movs	r3, #3
 80039fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80039fc:	2304      	movs	r3, #4
 80039fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a00:	f107 031c 	add.w	r3, r7, #28
 8003a04:	4619      	mov	r1, r3
 8003a06:	480f      	ldr	r0, [pc, #60]	; (8003a44 <MX_GPIO_Init+0x274>)
 8003a08:	f7fd fa58 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a10:	4b0a      	ldr	r3, [pc, #40]	; (8003a3c <MX_GPIO_Init+0x26c>)
 8003a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a14:	2300      	movs	r3, #0
 8003a16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a18:	f107 031c 	add.w	r3, r7, #28
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	4804      	ldr	r0, [pc, #16]	; (8003a30 <MX_GPIO_Init+0x260>)
 8003a20:	f7fd fa4c 	bl	8000ebc <HAL_GPIO_Init>

}
 8003a24:	bf00      	nop
 8003a26:	3730      	adds	r7, #48	; 0x30
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	40023800 	.word	0x40023800
 8003a30:	40021000 	.word	0x40021000
 8003a34:	40020800 	.word	0x40020800
 8003a38:	40020c00 	.word	0x40020c00
 8003a3c:	10110000 	.word	0x10110000
 8003a40:	40020000 	.word	0x40020000
 8003a44:	40020400 	.word	0x40020400

08003a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003a4c:	bf00      	nop
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
	...

08003a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a5e:	2300      	movs	r3, #0
 8003a60:	607b      	str	r3, [r7, #4]
 8003a62:	4b10      	ldr	r3, [pc, #64]	; (8003aa4 <HAL_MspInit+0x4c>)
 8003a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a66:	4a0f      	ldr	r2, [pc, #60]	; (8003aa4 <HAL_MspInit+0x4c>)
 8003a68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a6e:	4b0d      	ldr	r3, [pc, #52]	; (8003aa4 <HAL_MspInit+0x4c>)
 8003a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a76:	607b      	str	r3, [r7, #4]
 8003a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	603b      	str	r3, [r7, #0]
 8003a7e:	4b09      	ldr	r3, [pc, #36]	; (8003aa4 <HAL_MspInit+0x4c>)
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	4a08      	ldr	r2, [pc, #32]	; (8003aa4 <HAL_MspInit+0x4c>)
 8003a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a88:	6413      	str	r3, [r2, #64]	; 0x40
 8003a8a:	4b06      	ldr	r3, [pc, #24]	; (8003aa4 <HAL_MspInit+0x4c>)
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a92:	603b      	str	r3, [r7, #0]
 8003a94:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003a96:	2007      	movs	r0, #7
 8003a98:	f7fc fe56 	bl	8000748 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a9c:	bf00      	nop
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	40023800 	.word	0x40023800

08003aa8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b08a      	sub	sp, #40	; 0x28
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ab0:	f107 0314 	add.w	r3, r7, #20
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]
 8003ab8:	605a      	str	r2, [r3, #4]
 8003aba:	609a      	str	r2, [r3, #8]
 8003abc:	60da      	str	r2, [r3, #12]
 8003abe:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a62      	ldr	r2, [pc, #392]	; (8003c50 <HAL_I2S_MspInit+0x1a8>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	f040 80be 	bne.w	8003c48 <HAL_I2S_MspInit+0x1a0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003acc:	2300      	movs	r3, #0
 8003ace:	613b      	str	r3, [r7, #16]
 8003ad0:	4b60      	ldr	r3, [pc, #384]	; (8003c54 <HAL_I2S_MspInit+0x1ac>)
 8003ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad4:	4a5f      	ldr	r2, [pc, #380]	; (8003c54 <HAL_I2S_MspInit+0x1ac>)
 8003ad6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ada:	6413      	str	r3, [r2, #64]	; 0x40
 8003adc:	4b5d      	ldr	r3, [pc, #372]	; (8003c54 <HAL_I2S_MspInit+0x1ac>)
 8003ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ae4:	613b      	str	r3, [r7, #16]
 8003ae6:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ae8:	2300      	movs	r3, #0
 8003aea:	60fb      	str	r3, [r7, #12]
 8003aec:	4b59      	ldr	r3, [pc, #356]	; (8003c54 <HAL_I2S_MspInit+0x1ac>)
 8003aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af0:	4a58      	ldr	r2, [pc, #352]	; (8003c54 <HAL_I2S_MspInit+0x1ac>)
 8003af2:	f043 0304 	orr.w	r3, r3, #4
 8003af6:	6313      	str	r3, [r2, #48]	; 0x30
 8003af8:	4b56      	ldr	r3, [pc, #344]	; (8003c54 <HAL_I2S_MspInit+0x1ac>)
 8003afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	60fb      	str	r3, [r7, #12]
 8003b02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b04:	2300      	movs	r3, #0
 8003b06:	60bb      	str	r3, [r7, #8]
 8003b08:	4b52      	ldr	r3, [pc, #328]	; (8003c54 <HAL_I2S_MspInit+0x1ac>)
 8003b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0c:	4a51      	ldr	r2, [pc, #324]	; (8003c54 <HAL_I2S_MspInit+0x1ac>)
 8003b0e:	f043 0302 	orr.w	r3, r3, #2
 8003b12:	6313      	str	r3, [r2, #48]	; 0x30
 8003b14:	4b4f      	ldr	r3, [pc, #316]	; (8003c54 <HAL_I2S_MspInit+0x1ac>)
 8003b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	60bb      	str	r3, [r7, #8]
 8003b1e:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003b20:	2304      	movs	r3, #4
 8003b22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b24:	2302      	movs	r3, #2
 8003b26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8003b30:	2306      	movs	r3, #6
 8003b32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b34:	f107 0314 	add.w	r3, r7, #20
 8003b38:	4619      	mov	r1, r3
 8003b3a:	4847      	ldr	r0, [pc, #284]	; (8003c58 <HAL_I2S_MspInit+0x1b0>)
 8003b3c:	f7fd f9be 	bl	8000ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8003b40:	2348      	movs	r3, #72	; 0x48
 8003b42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b44:	2302      	movs	r3, #2
 8003b46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003b50:	2305      	movs	r3, #5
 8003b52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b54:	f107 0314 	add.w	r3, r7, #20
 8003b58:	4619      	mov	r1, r3
 8003b5a:	483f      	ldr	r0, [pc, #252]	; (8003c58 <HAL_I2S_MspInit+0x1b0>)
 8003b5c:	f7fd f9ae 	bl	8000ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8003b60:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b66:	2302      	movs	r3, #2
 8003b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003b72:	2305      	movs	r3, #5
 8003b74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b76:	f107 0314 	add.w	r3, r7, #20
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	4837      	ldr	r0, [pc, #220]	; (8003c5c <HAL_I2S_MspInit+0x1b4>)
 8003b7e:	f7fd f99d 	bl	8000ebc <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 8003b82:	4b37      	ldr	r3, [pc, #220]	; (8003c60 <HAL_I2S_MspInit+0x1b8>)
 8003b84:	4a37      	ldr	r2, [pc, #220]	; (8003c64 <HAL_I2S_MspInit+0x1bc>)
 8003b86:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8003b88:	4b35      	ldr	r3, [pc, #212]	; (8003c60 <HAL_I2S_MspInit+0x1b8>)
 8003b8a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003b8e:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b90:	4b33      	ldr	r3, [pc, #204]	; (8003c60 <HAL_I2S_MspInit+0x1b8>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b96:	4b32      	ldr	r3, [pc, #200]	; (8003c60 <HAL_I2S_MspInit+0x1b8>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b9c:	4b30      	ldr	r3, [pc, #192]	; (8003c60 <HAL_I2S_MspInit+0x1b8>)
 8003b9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ba2:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003ba4:	4b2e      	ldr	r3, [pc, #184]	; (8003c60 <HAL_I2S_MspInit+0x1b8>)
 8003ba6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003baa:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003bac:	4b2c      	ldr	r3, [pc, #176]	; (8003c60 <HAL_I2S_MspInit+0x1b8>)
 8003bae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003bb2:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 8003bb4:	4b2a      	ldr	r3, [pc, #168]	; (8003c60 <HAL_I2S_MspInit+0x1b8>)
 8003bb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bba:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003bbc:	4b28      	ldr	r3, [pc, #160]	; (8003c60 <HAL_I2S_MspInit+0x1b8>)
 8003bbe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003bc2:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003bc4:	4b26      	ldr	r3, [pc, #152]	; (8003c60 <HAL_I2S_MspInit+0x1b8>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 8003bca:	4825      	ldr	r0, [pc, #148]	; (8003c60 <HAL_I2S_MspInit+0x1b8>)
 8003bcc:	f7fc fdfe 	bl	80007cc <HAL_DMA_Init>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <HAL_I2S_MspInit+0x132>
    {
      Error_Handler();
 8003bd6:	f7ff ff37 	bl	8003a48 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a20      	ldr	r2, [pc, #128]	; (8003c60 <HAL_I2S_MspInit+0x1b8>)
 8003bde:	63da      	str	r2, [r3, #60]	; 0x3c
 8003be0:	4a1f      	ldr	r2, [pc, #124]	; (8003c60 <HAL_I2S_MspInit+0x1b8>)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8003be6:	4b20      	ldr	r3, [pc, #128]	; (8003c68 <HAL_I2S_MspInit+0x1c0>)
 8003be8:	4a20      	ldr	r2, [pc, #128]	; (8003c6c <HAL_I2S_MspInit+0x1c4>)
 8003bea:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8003bec:	4b1e      	ldr	r3, [pc, #120]	; (8003c68 <HAL_I2S_MspInit+0x1c0>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003bf2:	4b1d      	ldr	r3, [pc, #116]	; (8003c68 <HAL_I2S_MspInit+0x1c0>)
 8003bf4:	2240      	movs	r2, #64	; 0x40
 8003bf6:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bf8:	4b1b      	ldr	r3, [pc, #108]	; (8003c68 <HAL_I2S_MspInit+0x1c0>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003bfe:	4b1a      	ldr	r3, [pc, #104]	; (8003c68 <HAL_I2S_MspInit+0x1c0>)
 8003c00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c04:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003c06:	4b18      	ldr	r3, [pc, #96]	; (8003c68 <HAL_I2S_MspInit+0x1c0>)
 8003c08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c0c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003c0e:	4b16      	ldr	r3, [pc, #88]	; (8003c68 <HAL_I2S_MspInit+0x1c0>)
 8003c10:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c14:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8003c16:	4b14      	ldr	r3, [pc, #80]	; (8003c68 <HAL_I2S_MspInit+0x1c0>)
 8003c18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c1c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003c1e:	4b12      	ldr	r3, [pc, #72]	; (8003c68 <HAL_I2S_MspInit+0x1c0>)
 8003c20:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c24:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c26:	4b10      	ldr	r3, [pc, #64]	; (8003c68 <HAL_I2S_MspInit+0x1c0>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8003c2c:	480e      	ldr	r0, [pc, #56]	; (8003c68 <HAL_I2S_MspInit+0x1c0>)
 8003c2e:	f7fc fdcd 	bl	80007cc <HAL_DMA_Init>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d001      	beq.n	8003c3c <HAL_I2S_MspInit+0x194>
    {
      Error_Handler();
 8003c38:	f7ff ff06 	bl	8003a48 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a0a      	ldr	r2, [pc, #40]	; (8003c68 <HAL_I2S_MspInit+0x1c0>)
 8003c40:	639a      	str	r2, [r3, #56]	; 0x38
 8003c42:	4a09      	ldr	r2, [pc, #36]	; (8003c68 <HAL_I2S_MspInit+0x1c0>)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003c48:	bf00      	nop
 8003c4a:	3728      	adds	r7, #40	; 0x28
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	40003800 	.word	0x40003800
 8003c54:	40023800 	.word	0x40023800
 8003c58:	40020800 	.word	0x40020800
 8003c5c:	40020400 	.word	0x40020400
 8003c60:	20000074 	.word	0x20000074
 8003c64:	40026058 	.word	0x40026058
 8003c68:	200000d4 	.word	0x200000d4
 8003c6c:	40026070 	.word	0x40026070

08003c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003c74:	bf00      	nop
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr

08003c7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c82:	e7fe      	b.n	8003c82 <HardFault_Handler+0x4>

08003c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c88:	e7fe      	b.n	8003c88 <MemManage_Handler+0x4>

08003c8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c8e:	e7fe      	b.n	8003c8e <BusFault_Handler+0x4>

08003c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c94:	e7fe      	b.n	8003c94 <UsageFault_Handler+0x4>

08003c96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c96:	b480      	push	{r7}
 8003c98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c9a:	bf00      	nop
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ca8:	bf00      	nop
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003cb6:	bf00      	nop
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003cc4:	f7fc fc50 	bl	8000568 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003cc8:	bf00      	nop
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8003cd0:	4802      	ldr	r0, [pc, #8]	; (8003cdc <DMA1_Stream3_IRQHandler+0x10>)
 8003cd2:	f7fc fe89 	bl	80009e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003cd6:	bf00      	nop
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	20000074 	.word	0x20000074

08003ce0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003ce4:	4802      	ldr	r0, [pc, #8]	; (8003cf0 <DMA1_Stream4_IRQHandler+0x10>)
 8003ce6:	f7fc fe7f 	bl	80009e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003cea:	bf00      	nop
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	200000d4 	.word	0x200000d4

08003cf4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003cf8:	4b16      	ldr	r3, [pc, #88]	; (8003d54 <SystemInit+0x60>)
 8003cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfe:	4a15      	ldr	r2, [pc, #84]	; (8003d54 <SystemInit+0x60>)
 8003d00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003d08:	4b13      	ldr	r3, [pc, #76]	; (8003d58 <SystemInit+0x64>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a12      	ldr	r2, [pc, #72]	; (8003d58 <SystemInit+0x64>)
 8003d0e:	f043 0301 	orr.w	r3, r3, #1
 8003d12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003d14:	4b10      	ldr	r3, [pc, #64]	; (8003d58 <SystemInit+0x64>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003d1a:	4b0f      	ldr	r3, [pc, #60]	; (8003d58 <SystemInit+0x64>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a0e      	ldr	r2, [pc, #56]	; (8003d58 <SystemInit+0x64>)
 8003d20:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003d24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d28:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003d2a:	4b0b      	ldr	r3, [pc, #44]	; (8003d58 <SystemInit+0x64>)
 8003d2c:	4a0b      	ldr	r2, [pc, #44]	; (8003d5c <SystemInit+0x68>)
 8003d2e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003d30:	4b09      	ldr	r3, [pc, #36]	; (8003d58 <SystemInit+0x64>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a08      	ldr	r2, [pc, #32]	; (8003d58 <SystemInit+0x64>)
 8003d36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d3a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003d3c:	4b06      	ldr	r3, [pc, #24]	; (8003d58 <SystemInit+0x64>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d42:	4b04      	ldr	r3, [pc, #16]	; (8003d54 <SystemInit+0x60>)
 8003d44:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d48:	609a      	str	r2, [r3, #8]
#endif
}
 8003d4a:	bf00      	nop
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	e000ed00 	.word	0xe000ed00
 8003d58:	40023800 	.word	0x40023800
 8003d5c:	24003010 	.word	0x24003010

08003d60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003d60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d98 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003d64:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003d66:	e003      	b.n	8003d70 <LoopCopyDataInit>

08003d68 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003d68:	4b0c      	ldr	r3, [pc, #48]	; (8003d9c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003d6a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003d6c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003d6e:	3104      	adds	r1, #4

08003d70 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003d70:	480b      	ldr	r0, [pc, #44]	; (8003da0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003d72:	4b0c      	ldr	r3, [pc, #48]	; (8003da4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003d74:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003d76:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003d78:	d3f6      	bcc.n	8003d68 <CopyDataInit>
  ldr  r2, =_sbss
 8003d7a:	4a0b      	ldr	r2, [pc, #44]	; (8003da8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003d7c:	e002      	b.n	8003d84 <LoopFillZerobss>

08003d7e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003d7e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003d80:	f842 3b04 	str.w	r3, [r2], #4

08003d84 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003d84:	4b09      	ldr	r3, [pc, #36]	; (8003dac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003d86:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003d88:	d3f9      	bcc.n	8003d7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003d8a:	f7ff ffb3 	bl	8003cf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d8e:	f000 f819 	bl	8003dc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d92:	f7fe feb9 	bl	8002b08 <main>
  bx  lr    
 8003d96:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003d98:	2001ffff 	.word	0x2001ffff
  ldr  r3, =_sidata
 8003d9c:	08003e4c 	.word	0x08003e4c
  ldr  r0, =_sdata
 8003da0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003da4:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8003da8:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8003dac:	20000254 	.word	0x20000254

08003db0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003db0:	e7fe      	b.n	8003db0 <ADC_IRQHandler>

08003db2 <memset>:
 8003db2:	4402      	add	r2, r0
 8003db4:	4603      	mov	r3, r0
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d100      	bne.n	8003dbc <memset+0xa>
 8003dba:	4770      	bx	lr
 8003dbc:	f803 1b01 	strb.w	r1, [r3], #1
 8003dc0:	e7f9      	b.n	8003db6 <memset+0x4>
	...

08003dc4 <__libc_init_array>:
 8003dc4:	b570      	push	{r4, r5, r6, lr}
 8003dc6:	4d0d      	ldr	r5, [pc, #52]	; (8003dfc <__libc_init_array+0x38>)
 8003dc8:	4c0d      	ldr	r4, [pc, #52]	; (8003e00 <__libc_init_array+0x3c>)
 8003dca:	1b64      	subs	r4, r4, r5
 8003dcc:	10a4      	asrs	r4, r4, #2
 8003dce:	2600      	movs	r6, #0
 8003dd0:	42a6      	cmp	r6, r4
 8003dd2:	d109      	bne.n	8003de8 <__libc_init_array+0x24>
 8003dd4:	4d0b      	ldr	r5, [pc, #44]	; (8003e04 <__libc_init_array+0x40>)
 8003dd6:	4c0c      	ldr	r4, [pc, #48]	; (8003e08 <__libc_init_array+0x44>)
 8003dd8:	f000 f818 	bl	8003e0c <_init>
 8003ddc:	1b64      	subs	r4, r4, r5
 8003dde:	10a4      	asrs	r4, r4, #2
 8003de0:	2600      	movs	r6, #0
 8003de2:	42a6      	cmp	r6, r4
 8003de4:	d105      	bne.n	8003df2 <__libc_init_array+0x2e>
 8003de6:	bd70      	pop	{r4, r5, r6, pc}
 8003de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dec:	4798      	blx	r3
 8003dee:	3601      	adds	r6, #1
 8003df0:	e7ee      	b.n	8003dd0 <__libc_init_array+0xc>
 8003df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003df6:	4798      	blx	r3
 8003df8:	3601      	adds	r6, #1
 8003dfa:	e7f2      	b.n	8003de2 <__libc_init_array+0x1e>
 8003dfc:	08003e44 	.word	0x08003e44
 8003e00:	08003e44 	.word	0x08003e44
 8003e04:	08003e44 	.word	0x08003e44
 8003e08:	08003e48 	.word	0x08003e48

08003e0c <_init>:
 8003e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e0e:	bf00      	nop
 8003e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e12:	bc08      	pop	{r3}
 8003e14:	469e      	mov	lr, r3
 8003e16:	4770      	bx	lr

08003e18 <_fini>:
 8003e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e1a:	bf00      	nop
 8003e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e1e:	bc08      	pop	{r3}
 8003e20:	469e      	mov	lr, r3
 8003e22:	4770      	bx	lr
